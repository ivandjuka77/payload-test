/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  boolean,
  text,
  jsonb,
  numeric,
  serial,
  timestamp,
  type AnyPgColumn,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum__locales = pgEnum('enum__locales', ['en', 'sk', 'jp'])
export const enum_pages_hero_cta_links_link_type = pgEnum('enum_pages_hero_cta_links_link_type', [
  'reference',
  'custom',
])
export const enum_pages_hero_cta_links_link_appearance = pgEnum(
  'enum_pages_hero_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum_sl_featured_item_links_link_type = pgEnum(
  'enum_sl_featured_item_links_link_type',
  ['reference', 'custom'],
)
export const enum_sl_featured_item_links_link_appearance = pgEnum(
  'enum_sl_featured_item_links_link_appearance',
  ['default'],
)
export const enum_sl_featured_cards_links_link_type = pgEnum(
  'enum_sl_featured_cards_links_link_type',
  ['reference', 'custom'],
)
export const enum_sl_featured_cards_links_link_appearance = pgEnum(
  'enum_sl_featured_cards_links_link_appearance',
  ['default'],
)
export const enum_sl_cta_links_link_type = pgEnum('enum_sl_cta_links_link_type', [
  'reference',
  'custom',
])
export const enum_sl_cta_links_link_appearance = pgEnum('enum_sl_cta_links_link_appearance', [
  'default',
  'outline',
])
export const enum_pages_blocks_cta_links_link_type = pgEnum(
  'enum_pages_blocks_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_cta_links_link_appearance = pgEnum(
  'enum_pages_blocks_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_content_columns_size = pgEnum(
  'enum_pages_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum_pages_blocks_content_columns_link_type = pgEnum(
  'enum_pages_blocks_content_columns_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_content_columns_link_appearance = pgEnum(
  'enum_pages_blocks_content_columns_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_quick_access_cards_links_link_type = pgEnum(
  'enum_pages_blocks_quick_access_cards_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_quick_access_cards_links_link_appearance = pgEnum(
  'enum_pages_blocks_quick_access_cards_links_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_product_showcase_cta_links_link_type = pgEnum(
  'enum_pages_blocks_product_showcase_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_product_showcase_cta_links_link_appearance = pgEnum(
  'enum_pages_blocks_product_showcase_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_career_cta_links_link_type = pgEnum(
  'enum_pages_blocks_career_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_career_cta_links_link_appearance = pgEnum(
  'enum_pages_blocks_career_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_sustainability_cta_links_link_type = pgEnum(
  'enum_pages_blocks_sustainability_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_sustainability_cta_links_link_appearance = pgEnum(
  'enum_pages_blocks_sustainability_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_content_image_layout = pgEnum(
  'enum_pages_blocks_content_image_layout',
  ['left', 'right'],
)
export const enum_pages_blocks_showcase_cta_links_link_type = pgEnum(
  'enum_pages_blocks_showcase_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_showcase_cta_links_link_appearance = pgEnum(
  'enum_pages_blocks_showcase_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_showcase_type = pgEnum('enum_pages_blocks_showcase_type', [
  'product',
  'content',
  'feature',
  'category',
])
export const enum_pages_blocks_product_filter_enabled_filters = pgEnum(
  'enum_pages_blocks_product_filter_enabled_filters',
  ['category', 'industry', 'application'],
)
export const enum_pages_blocks_product_filter_cta_links_link_type = pgEnum(
  'enum_pages_blocks_product_filter_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_product_filter_cta_links_link_appearance = pgEnum(
  'enum_pages_blocks_product_filter_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_status = pgEnum('enum_pages_status', ['draft', 'published'])
export const enum_pages_hero_type = pgEnum('enum_pages_hero_type', [
  'none',
  'carousel',
  'simple',
  'backgroundImage',
  'backgroundImageCompact',
  'minimal',
  'backgroundVideo',
])
export const enum__pages_v_version_hero_cta_links_link_type = pgEnum(
  'enum__pages_v_version_hero_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_version_hero_cta_links_link_appearance = pgEnum(
  'enum__pages_v_version_hero_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum__sl_v_featured_item_links_link_type = pgEnum(
  'enum__sl_v_featured_item_links_link_type',
  ['reference', 'custom'],
)
export const enum__sl_v_featured_item_links_link_appearance = pgEnum(
  'enum__sl_v_featured_item_links_link_appearance',
  ['default'],
)
export const enum__sl_v_featured_cards_links_link_type = pgEnum(
  'enum__sl_v_featured_cards_links_link_type',
  ['reference', 'custom'],
)
export const enum__sl_v_featured_cards_links_link_appearance = pgEnum(
  'enum__sl_v_featured_cards_links_link_appearance',
  ['default'],
)
export const enum__sl_v_cta_links_link_type = pgEnum('enum__sl_v_cta_links_link_type', [
  'reference',
  'custom',
])
export const enum__sl_v_cta_links_link_appearance = pgEnum('enum__sl_v_cta_links_link_appearance', [
  'default',
  'outline',
])
export const enum__pages_v_blocks_cta_links_link_type = pgEnum(
  'enum__pages_v_blocks_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_cta_links_link_appearance = pgEnum(
  'enum__pages_v_blocks_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_content_columns_size = pgEnum(
  'enum__pages_v_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum__pages_v_blocks_content_columns_link_type = pgEnum(
  'enum__pages_v_blocks_content_columns_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_content_columns_link_appearance = pgEnum(
  'enum__pages_v_blocks_content_columns_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_quick_access_cards_links_link_type = pgEnum(
  'enum__pages_v_blocks_quick_access_cards_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_quick_access_cards_links_link_appearance = pgEnum(
  'enum__pages_v_blocks_quick_access_cards_links_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_product_showcase_cta_links_link_type = pgEnum(
  'enum__pages_v_blocks_product_showcase_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_product_showcase_cta_links_link_appearance = pgEnum(
  'enum__pages_v_blocks_product_showcase_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_career_cta_links_link_type = pgEnum(
  'enum__pages_v_blocks_career_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_career_cta_links_link_appearance = pgEnum(
  'enum__pages_v_blocks_career_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_sustainability_cta_links_link_type = pgEnum(
  'enum__pages_v_blocks_sustainability_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_sustainability_cta_links_link_appearance = pgEnum(
  'enum__pages_v_blocks_sustainability_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_content_image_layout = pgEnum(
  'enum__pages_v_blocks_content_image_layout',
  ['left', 'right'],
)
export const enum__pages_v_blocks_showcase_cta_links_link_type = pgEnum(
  'enum__pages_v_blocks_showcase_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_showcase_cta_links_link_appearance = pgEnum(
  'enum__pages_v_blocks_showcase_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_showcase_type = pgEnum('enum__pages_v_blocks_showcase_type', [
  'product',
  'content',
  'feature',
  'category',
])
export const enum__pages_v_blocks_product_filter_enabled_filters = pgEnum(
  'enum__pages_v_blocks_product_filter_enabled_filters',
  ['category', 'industry', 'application'],
)
export const enum__pages_v_blocks_product_filter_cta_links_link_type = pgEnum(
  'enum__pages_v_blocks_product_filter_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_product_filter_cta_links_link_appearance = pgEnum(
  'enum__pages_v_blocks_product_filter_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_version_status = pgEnum('enum__pages_v_version_status', [
  'draft',
  'published',
])
export const enum__pages_v_published_locale = pgEnum('enum__pages_v_published_locale', [
  'en',
  'sk',
  'jp',
])
export const enum__pages_v_version_hero_type = pgEnum('enum__pages_v_version_hero_type', [
  'none',
  'carousel',
  'simple',
  'backgroundImage',
  'backgroundImageCompact',
  'minimal',
  'backgroundVideo',
])
export const enum_posts_type = pgEnum('enum_posts_type', ['news', 'research', 'case-study'])
export const enum_posts_status = pgEnum('enum_posts_status', ['draft', 'published'])
export const enum__posts_v_version_type = pgEnum('enum__posts_v_version_type', [
  'news',
  'research',
  'case-study',
])
export const enum__posts_v_version_status = pgEnum('enum__posts_v_version_status', [
  'draft',
  'published',
])
export const enum__posts_v_published_locale = pgEnum('enum__posts_v_published_locale', [
  'en',
  'sk',
  'jp',
])
export const enum_products_technical_specifications_lab_verified = pgEnum(
  'enum_products_technical_specifications_lab_verified',
  ['Verified', 'Researched', 'Not Confirmed'],
)
export const enum_products_status = pgEnum('enum_products_status', ['draft', 'published'])
export const enum__products_v_version_technical_specifications_lab_verified = pgEnum(
  'enum__products_v_version_technical_specifications_lab_verified',
  ['Verified', 'Researched', 'Not Confirmed'],
)
export const enum__products_v_version_status = pgEnum('enum__products_v_version_status', [
  'draft',
  'published',
])
export const enum__products_v_published_locale = pgEnum('enum__products_v_published_locale', [
  'en',
  'sk',
  'jp',
])
export const enum_industries_status = pgEnum('enum_industries_status', ['draft', 'published'])
export const enum__industries_v_version_status = pgEnum('enum__industries_v_version_status', [
  'draft',
  'published',
])
export const enum__industries_v_published_locale = pgEnum('enum__industries_v_published_locale', [
  'en',
  'sk',
  'jp',
])
export const enum_case_studies_status = pgEnum('enum_case_studies_status', ['draft', 'published'])
export const enum__case_studies_v_version_status = pgEnum('enum__case_studies_v_version_status', [
  'draft',
  'published',
])
export const enum__case_studies_v_published_locale = pgEnum(
  'enum__case_studies_v_published_locale',
  ['en', 'sk', 'jp'],
)
export const enum_services_status = pgEnum('enum_services_status', ['draft', 'published'])
export const enum__services_v_version_status = pgEnum('enum__services_v_version_status', [
  'draft',
  'published',
])
export const enum__services_v_published_locale = pgEnum('enum__services_v_published_locale', [
  'en',
  'sk',
  'jp',
])
export const enum_careers_type = pgEnum('enum_careers_type', [
  'fulltime',
  'parttime',
  'intern',
  'contract',
])
export const enum_careers_status = pgEnum('enum_careers_status', ['draft', 'published'])
export const enum__careers_v_version_type = pgEnum('enum__careers_v_version_type', [
  'fulltime',
  'parttime',
  'intern',
  'contract',
])
export const enum__careers_v_version_status = pgEnum('enum__careers_v_version_status', [
  'draft',
  'published',
])
export const enum__careers_v_published_locale = pgEnum('enum__careers_v_published_locale', [
  'en',
  'sk',
  'jp',
])
export const enum_product_documents_type = pgEnum('enum_product_documents_type', ['tds', 'sds'])
export const enum_redirects_to_type = pgEnum('enum_redirects_to_type', ['reference', 'custom'])
export const enum_forms_confirmation_type = pgEnum('enum_forms_confirmation_type', [
  'message',
  'redirect',
])
export const enum_payload_jobs_log_task_slug = pgEnum('enum_payload_jobs_log_task_slug', [
  'inline',
  'schedulePublish',
])
export const enum_payload_jobs_log_state = pgEnum('enum_payload_jobs_log_state', [
  'failed',
  'succeeded',
])
export const enum_payload_jobs_task_slug = pgEnum('enum_payload_jobs_task_slug', [
  'inline',
  'schedulePublish',
])
export const enum_header_nav_items_link_type = pgEnum('enum_header_nav_items_link_type', [
  'reference',
  'custom',
])
export const enum_footer_nav_items_link_type = pgEnum('enum_footer_nav_items_link_type', [
  'reference',
  'custom',
])

export const pages_hero_cta_links = pgTable(
  'pages_hero_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_hero_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_hero_cta_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_hero_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_hero_cta_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_hero_cta_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_hero_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const sl_featured_item_links = pgTable(
  'sl_featured_item_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_sl_featured_item_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_sl_featured_item_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('sl_featured_item_links_order_idx').on(columns._order),
    _parentIDIdx: index('sl_featured_item_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('sl_featured_item_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [sl.id],
      name: 'sl_featured_item_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const sl_featured_cards_links = pgTable(
  'sl_featured_cards_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_sl_featured_cards_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_sl_featured_cards_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('sl_featured_cards_links_order_idx').on(columns._order),
    _parentIDIdx: index('sl_featured_cards_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('sl_featured_cards_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [sl_featured_cards.id],
      name: 'sl_featured_cards_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const sl_featured_cards = pgTable(
  'sl_featured_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('sl_featured_cards_order_idx').on(columns._order),
    _parentIDIdx: index('sl_featured_cards_parent_id_idx').on(columns._parentID),
    _localeIdx: index('sl_featured_cards_locale_idx').on(columns._locale),
    sl_featured_cards_image_idx: index('sl_featured_cards_image_idx').on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [sl.id],
      name: 'sl_featured_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const sl_cta_links = pgTable(
  'sl_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_sl_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum_sl_cta_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('sl_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('sl_cta_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('sl_cta_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [sl.id],
      name: 'sl_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const sl = pgTable(
  'sl',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    backgroundImage: integer('background_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    badge_text: varchar('badge_text'),
    featuredItem_title: varchar('featured_item_title'),
    featuredItem_description: varchar('featured_item_description'),
    featuredItem_image: integer('featured_item_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('sl_order_idx').on(columns._order),
    _parentIDIdx: index('sl_parent_id_idx').on(columns._parentID),
    _localeIdx: index('sl_locale_idx').on(columns._locale),
    sl_background_image_idx: index('sl_background_image_idx').on(columns.backgroundImage),
    sl_featured_item_featured_item_image_idx: index('sl_featured_item_featured_item_image_idx').on(
      columns.featuredItem_image,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'sl_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_cta_links = pgTable(
  'pages_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_cta_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_cta_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_cta.id],
      name: 'pages_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_cta = pgTable(
  'pages_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    richText: jsonb('rich_text'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_cta_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_cta_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_content_columns = pgTable(
  'pages_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    size: enum_pages_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum_pages_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_content_columns_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_content_columns_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_content.id],
      name: 'pages_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_content = pgTable(
  'pages_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_content_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_content_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_media_block = pgTable(
  'pages_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_media_block_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_media_block_locale_idx').on(columns._locale),
    pages_blocks_media_block_media_idx: index('pages_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_form_block = pgTable(
  'pages_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: boolean('enable_intro'),
    introContent: jsonb('intro_content'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_form_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_form_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_form_block_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_form_block_locale_idx').on(columns._locale),
    pages_blocks_form_block_form_idx: index('pages_blocks_form_block_form_idx').on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_quick_access_cards_links = pgTable(
  'pages_blocks_quick_access_cards_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type:
      enum_pages_blocks_quick_access_cards_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_quick_access_cards_links_link_appearance('link_appearance').default(
        'default',
      ),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_quick_access_cards_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_quick_access_cards_links_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('pages_blocks_quick_access_cards_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_quick_access_cards.id],
      name: 'pages_blocks_quick_access_cards_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_quick_access_cards = pgTable(
  'pages_blocks_quick_access_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    backgroundImage: integer('background_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_quick_access_cards_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_quick_access_cards_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_quick_access_cards_locale_idx').on(columns._locale),
    pages_blocks_quick_access_cards_background_image_idx: index(
      'pages_blocks_quick_access_cards_background_image_idx',
    ).on(columns.backgroundImage),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_quick_access.id],
      name: 'pages_blocks_quick_access_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_quick_access = pgTable(
  'pages_blocks_quick_access',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_quick_access_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_quick_access_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_quick_access_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_quick_access_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_quick_access_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_product_showcase_products = pgTable(
  'pages_blocks_product_showcase_products',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_product_showcase_products_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_product_showcase_products_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('pages_blocks_product_showcase_products_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_product_showcase.id],
      name: 'pages_blocks_product_showcase_products_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_product_showcase_cta_links = pgTable(
  'pages_blocks_product_showcase_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type:
      enum_pages_blocks_product_showcase_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_product_showcase_cta_links_link_appearance('link_appearance').default(
        'default',
      ),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_product_showcase_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_product_showcase_cta_links_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('pages_blocks_product_showcase_cta_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_product_showcase.id],
      name: 'pages_blocks_product_showcase_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_product_showcase = pgTable(
  'pages_blocks_product_showcase',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    cta_title: varchar('cta_title'),
    cta_description: varchar('cta_description'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_product_showcase_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_product_showcase_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_product_showcase_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_product_showcase_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_product_showcase_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_career_features = pgTable(
  'pages_blocks_career_features',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    content: varchar('content'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_career_features_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_career_features_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_career_features_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_career.id],
      name: 'pages_blocks_career_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_career_cta_links = pgTable(
  'pages_blocks_career_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_blocks_career_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_career_cta_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_career_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_career_cta_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_career_cta_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_career.id],
      name: 'pages_blocks_career_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_career = pgTable(
  'pages_blocks_career',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    cta_title: varchar('cta_title'),
    cta_description: varchar('cta_description'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_career_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_career_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_career_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_career_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_career_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_sustainability_features = pgTable(
  'pages_blocks_sustainability_features',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    content: varchar('content'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_sustainability_features_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_sustainability_features_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_sustainability_features_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_sustainability.id],
      name: 'pages_blocks_sustainability_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_sustainability_cta_links = pgTable(
  'pages_blocks_sustainability_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type:
      enum_pages_blocks_sustainability_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_sustainability_cta_links_link_appearance('link_appearance').default(
        'default',
      ),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_sustainability_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_sustainability_cta_links_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('pages_blocks_sustainability_cta_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_sustainability.id],
      name: 'pages_blocks_sustainability_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_sustainability = pgTable(
  'pages_blocks_sustainability',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    card_title: varchar('card_title'),
    card_description: jsonb('card_description'),
    cta_title: varchar('cta_title'),
    cta_description: varchar('cta_description'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_sustainability_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_sustainability_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_sustainability_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_sustainability_locale_idx').on(columns._locale),
    pages_blocks_sustainability_image_idx: index('pages_blocks_sustainability_image_idx').on(
      columns.image,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_sustainability_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_content_image = pgTable(
  'pages_blocks_content_image',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    content: jsonb('content'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    layout: enum_pages_blocks_content_image_layout('layout').default('left'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_image_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_image_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_content_image_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_content_image_locale_idx').on(columns._locale),
    pages_blocks_content_image_image_idx: index('pages_blocks_content_image_image_idx').on(
      columns.image,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_content_image_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_industry_showcase = pgTable(
  'pages_blocks_industry_showcase',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    limit: numeric('limit').default('3'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_industry_showcase_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_industry_showcase_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_industry_showcase_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_industry_showcase_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_industry_showcase_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_showcase_content_items = pgTable(
  'pages_blocks_showcase_content_items',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_showcase_content_items_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_showcase_content_items_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_showcase_content_items_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_showcase.id],
      name: 'pages_blocks_showcase_content_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_showcase_features = pgTable(
  'pages_blocks_showcase_features',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_showcase_features_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_showcase_features_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_showcase_features_locale_idx').on(columns._locale),
    pages_blocks_showcase_features_media_idx: index('pages_blocks_showcase_features_media_idx').on(
      columns.media,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_showcase.id],
      name: 'pages_blocks_showcase_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_showcase_cta_links = pgTable(
  'pages_blocks_showcase_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_blocks_showcase_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_showcase_cta_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_showcase_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_showcase_cta_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_showcase_cta_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_showcase.id],
      name: 'pages_blocks_showcase_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_showcase = pgTable(
  'pages_blocks_showcase',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    type: enum_pages_blocks_showcase_type('type').default('product'),
    title: varchar('title'),
    description: varchar('description'),
    showCta: boolean('show_cta').default(true),
    cta_title: varchar('cta_title'),
    cta_description: varchar('cta_description'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_showcase_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_showcase_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_showcase_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_showcase_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_showcase_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_news = pgTable(
  'pages_blocks_news',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title').default('News & Insights'),
    description: varchar('description').default(
      "Stay updated with VUP's latest achievements, innovations, and industry insights.",
    ),
    badge: varchar('badge').default('Latest Updates'),
    linkLabel: varchar('link_label').default('View all news and publications'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_news_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_news_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_news_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_news_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_news_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_product_filter_enabled_filters = pgTable(
  'pages_blocks_product_filter_enabled_filters',
  {
    order: integer('order').notNull(),
    parent: varchar('parent_id').notNull(),
    value: enum_pages_blocks_product_filter_enabled_filters('value'),
    locale: enum__locales('locale').notNull(),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('pages_blocks_product_filter_enabled_filters_order_idx').on(columns.order),
    parentIdx: index('pages_blocks_product_filter_enabled_filters_parent_idx').on(columns.parent),
    localeIdx: index('pages_blocks_product_filter_enabled_filters_locale_idx').on(columns.locale),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [pages_blocks_product_filter.id],
      name: 'pages_blocks_product_filter_enabled_filters_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_product_filter_cta_links = pgTable(
  'pages_blocks_product_filter_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type:
      enum_pages_blocks_product_filter_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_product_filter_cta_links_link_appearance('link_appearance').default(
        'default',
      ),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_product_filter_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_product_filter_cta_links_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('pages_blocks_product_filter_cta_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_product_filter.id],
      name: 'pages_blocks_product_filter_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_product_filter = pgTable(
  'pages_blocks_product_filter',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title').default('Product Catalog'),
    description: varchar('description').default(
      'Explore our products by category, industry, and application.',
    ),
    showCta: boolean('show_cta').default(true),
    cta_title: varchar('cta_title'),
    cta_description: varchar('cta_description'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_product_filter_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_product_filter_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_product_filter_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_product_filter_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_product_filter_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_vertical_cards_cards = pgTable(
  'pages_blocks_vertical_cards_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    paragraph: jsonb('paragraph'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_vertical_cards_cards_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_vertical_cards_cards_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_vertical_cards_cards_locale_idx').on(columns._locale),
    pages_blocks_vertical_cards_cards_image_idx: index(
      'pages_blocks_vertical_cards_cards_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_vertical_cards.id],
      name: 'pages_blocks_vertical_cards_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_vertical_cards = pgTable(
  'pages_blocks_vertical_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_vertical_cards_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_vertical_cards_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_vertical_cards_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_vertical_cards_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_vertical_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_grid_image_cards_cards_highlights = pgTable(
  'pages_blocks_grid_image_cards_cards_highlights',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    highlight: varchar('highlight'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_grid_image_cards_cards_highlights_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_grid_image_cards_cards_highlights_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('pages_blocks_grid_image_cards_cards_highlights_locale_idx').on(
      columns._locale,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_grid_image_cards_cards.id],
      name: 'pages_blocks_grid_image_cards_cards_highlights_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_grid_image_cards_cards = pgTable(
  'pages_blocks_grid_image_cards_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    title: varchar('title'),
    paragraph: jsonb('paragraph'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_grid_image_cards_cards_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_grid_image_cards_cards_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_grid_image_cards_cards_locale_idx').on(columns._locale),
    pages_blocks_grid_image_cards_cards_image_idx: index(
      'pages_blocks_grid_image_cards_cards_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_grid_image_cards.id],
      name: 'pages_blocks_grid_image_cards_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_grid_image_cards = pgTable(
  'pages_blocks_grid_image_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    badge: varchar('badge'),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_grid_image_cards_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_grid_image_cards_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_grid_image_cards_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_grid_image_cards_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_grid_image_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_careers = pgTable(
  'pages_blocks_careers',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_careers_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_careers_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_careers_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_careers_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_careers_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_certifications_certifications = pgTable(
  'pages_blocks_certifications_certifications',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    description: varchar('description'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_certifications_certifications_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_certifications_certifications_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('pages_blocks_certifications_certifications_locale_idx').on(columns._locale),
    pages_blocks_certifications_certifications_image_idx: index(
      'pages_blocks_certifications_certifications_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_certifications.id],
      name: 'pages_blocks_certifications_certifications_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_certifications = pgTable(
  'pages_blocks_certifications',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    featuredCertification_title: varchar('featured_certification_title'),
    featuredCertification_subtitle: varchar('featured_certification_subtitle'),
    featuredCertification_description: varchar('featured_certification_description'),
    featuredCertification_articleLink: varchar('featured_certification_article_link'),
    featuredCertification_image: integer('featured_certification_image_id').references(
      () => media.id,
      {
        onDelete: 'set null',
      },
    ),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_certifications_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_certifications_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_certifications_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_certifications_locale_idx').on(columns._locale),
    pages_blocks_certifications_featured_certification_featured_certification_image_idx: index(
      'pages_blocks_certifications_featured_certification_featured_certification_image_idx',
    ).on(columns.featuredCertification_image),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_certifications_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_timeline_items_key_achievements = pgTable(
  'pages_blocks_timeline_items_key_achievements',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    achievement: varchar('achievement'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_timeline_items_key_achievements_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_timeline_items_key_achievements_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('pages_blocks_timeline_items_key_achievements_locale_idx').on(
      columns._locale,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_timeline_items.id],
      name: 'pages_blocks_timeline_items_key_achievements_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_timeline_items = pgTable(
  'pages_blocks_timeline_items',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    period: varchar('period'),
    content: jsonb('content'),
    imageUrl: integer('image_url_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    highlight: varchar('highlight'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_timeline_items_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_timeline_items_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_timeline_items_locale_idx').on(columns._locale),
    pages_blocks_timeline_items_image_url_idx: index(
      'pages_blocks_timeline_items_image_url_idx',
    ).on(columns.imageUrl),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_timeline.id],
      name: 'pages_blocks_timeline_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_timeline = pgTable(
  'pages_blocks_timeline',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    badge: varchar('badge'),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_timeline_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_timeline_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_timeline_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_timeline_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_timeline_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_team = pgTable(
  'pages_blocks_team',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_team_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_team_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_team_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_team_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_team_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages = pgTable(
  'pages',
  {
    id: serial('id').primaryKey(),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_pages_status('_status').default('draft'),
  },
  (columns) => ({
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
    pages__status_idx: index('pages__status_idx').on(columns._status),
  }),
)

export const pages_locales = pgTable(
  'pages_locales',
  {
    title: varchar('title'),
    hero_type: enum_pages_hero_type('hero_type').default('carousel'),
    hero_title: varchar('hero_title'),
    hero_description: varchar('hero_description'),
    hero_media: integer('hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    slug: varchar('slug'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    pages_hero_hero_media_idx: index('pages_hero_hero_media_idx').on(columns.hero_media),
    pages_meta_meta_image_idx: index('pages_meta_meta_image_idx').on(columns.meta_image),
    pages_slug_idx: index('pages_slug_idx').on(columns.slug, columns._locale),
    _localeParent: uniqueIndex('pages_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_rels = pgTable(
  'pages_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    locale: enum__locales('locale'),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    productsID: integer('products_id'),
    industriesID: integer('industries_id'),
    productCategoriesID: integer('product_categories_id'),
    careersID: integer('careers_id'),
    teamMembersID: integer('team_members_id'),
  },
  (columns) => ({
    order: index('pages_rels_order_idx').on(columns.order),
    parentIdx: index('pages_rels_parent_idx').on(columns.parent),
    pathIdx: index('pages_rels_path_idx').on(columns.path),
    localeIdx: index('pages_rels_locale_idx').on(columns.locale),
    pages_rels_pages_id_idx: index('pages_rels_pages_id_idx').on(columns.pagesID, columns.locale),
    pages_rels_posts_id_idx: index('pages_rels_posts_id_idx').on(columns.postsID, columns.locale),
    pages_rels_products_id_idx: index('pages_rels_products_id_idx').on(
      columns.productsID,
      columns.locale,
    ),
    pages_rels_industries_id_idx: index('pages_rels_industries_id_idx').on(
      columns.industriesID,
      columns.locale,
    ),
    pages_rels_product_categories_id_idx: index('pages_rels_product_categories_id_idx').on(
      columns.productCategoriesID,
      columns.locale,
    ),
    pages_rels_careers_id_idx: index('pages_rels_careers_id_idx').on(
      columns.careersID,
      columns.locale,
    ),
    pages_rels_team_members_id_idx: index('pages_rels_team_members_id_idx').on(
      columns.teamMembersID,
      columns.locale,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [pages.id],
      name: 'pages_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'pages_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'pages_rels_posts_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'pages_rels_products_fk',
    }).onDelete('cascade'),
    industriesIdFk: foreignKey({
      columns: [columns['industriesID']],
      foreignColumns: [industries.id],
      name: 'pages_rels_industries_fk',
    }).onDelete('cascade'),
    productCategoriesIdFk: foreignKey({
      columns: [columns['productCategoriesID']],
      foreignColumns: [product_categories.id],
      name: 'pages_rels_product_categories_fk',
    }).onDelete('cascade'),
    careersIdFk: foreignKey({
      columns: [columns['careersID']],
      foreignColumns: [careers.id],
      name: 'pages_rels_careers_fk',
    }).onDelete('cascade'),
    teamMembersIdFk: foreignKey({
      columns: [columns['teamMembersID']],
      foreignColumns: [team_members.id],
      name: 'pages_rels_team_members_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_version_hero_cta_links = pgTable(
  '_pages_v_version_hero_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_version_hero_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_version_hero_cta_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_version_hero_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_version_hero_cta_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_version_hero_cta_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_version_hero_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _sl_v_featured_item_links = pgTable(
  '_sl_v_featured_item_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__sl_v_featured_item_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__sl_v_featured_item_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_sl_v_featured_item_links_order_idx').on(columns._order),
    _parentIDIdx: index('_sl_v_featured_item_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_sl_v_featured_item_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_sl_v.id],
      name: '_sl_v_featured_item_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _sl_v_featured_cards_links = pgTable(
  '_sl_v_featured_cards_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__sl_v_featured_cards_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__sl_v_featured_cards_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_sl_v_featured_cards_links_order_idx').on(columns._order),
    _parentIDIdx: index('_sl_v_featured_cards_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_sl_v_featured_cards_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_sl_v_featured_cards.id],
      name: '_sl_v_featured_cards_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _sl_v_featured_cards = pgTable(
  '_sl_v_featured_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_sl_v_featured_cards_order_idx').on(columns._order),
    _parentIDIdx: index('_sl_v_featured_cards_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_sl_v_featured_cards_locale_idx').on(columns._locale),
    _sl_v_featured_cards_image_idx: index('_sl_v_featured_cards_image_idx').on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_sl_v.id],
      name: '_sl_v_featured_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _sl_v_cta_links = pgTable(
  '_sl_v_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__sl_v_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum__sl_v_cta_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_sl_v_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('_sl_v_cta_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_sl_v_cta_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_sl_v.id],
      name: '_sl_v_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _sl_v = pgTable(
  '_sl_v',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    backgroundImage: integer('background_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    badge_text: varchar('badge_text'),
    featuredItem_title: varchar('featured_item_title'),
    featuredItem_description: varchar('featured_item_description'),
    featuredItem_image: integer('featured_item_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_sl_v_order_idx').on(columns._order),
    _parentIDIdx: index('_sl_v_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_sl_v_locale_idx').on(columns._locale),
    _sl_v_background_image_idx: index('_sl_v_background_image_idx').on(columns.backgroundImage),
    _sl_v_featured_item_featured_item_image_idx: index(
      '_sl_v_featured_item_featured_item_image_idx',
    ).on(columns.featuredItem_image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_sl_v_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cta_links = pgTable(
  '_pages_v_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_cta_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_cta_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_cta.id],
      name: '_pages_v_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cta = pgTable(
  '_pages_v_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    richText: jsonb('rich_text'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_cta_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_cta_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_content_columns = pgTable(
  '_pages_v_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    size: enum__pages_v_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum__pages_v_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_content_columns_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_content_columns_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_content.id],
      name: '_pages_v_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_content = pgTable(
  '_pages_v_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_content_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_content_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_media_block = pgTable(
  '_pages_v_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_media_block_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_media_block_locale_idx').on(columns._locale),
    _pages_v_blocks_media_block_media_idx: index('_pages_v_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_form_block = pgTable(
  '_pages_v_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: boolean('enable_intro'),
    introContent: jsonb('intro_content'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_form_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_form_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_form_block_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_form_block_locale_idx').on(columns._locale),
    _pages_v_blocks_form_block_form_idx: index('_pages_v_blocks_form_block_form_idx').on(
      columns.form,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_quick_access_cards_links = pgTable(
  '_pages_v_blocks_quick_access_cards_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type:
      enum__pages_v_blocks_quick_access_cards_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_quick_access_cards_links_link_appearance('link_appearance').default(
        'default',
      ),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_quick_access_cards_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_quick_access_cards_links_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('_pages_v_blocks_quick_access_cards_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_quick_access_cards.id],
      name: '_pages_v_blocks_quick_access_cards_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_quick_access_cards = pgTable(
  '_pages_v_blocks_quick_access_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    backgroundImage: integer('background_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_quick_access_cards_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_quick_access_cards_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_quick_access_cards_locale_idx').on(columns._locale),
    _pages_v_blocks_quick_access_cards_background_image_idx: index(
      '_pages_v_blocks_quick_access_cards_background_image_idx',
    ).on(columns.backgroundImage),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_quick_access.id],
      name: '_pages_v_blocks_quick_access_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_quick_access = pgTable(
  '_pages_v_blocks_quick_access',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_quick_access_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_quick_access_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_quick_access_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_quick_access_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_quick_access_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_product_showcase_products = pgTable(
  '_pages_v_blocks_product_showcase_products',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_product_showcase_products_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_product_showcase_products_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('_pages_v_blocks_product_showcase_products_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_product_showcase.id],
      name: '_pages_v_blocks_product_showcase_products_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_product_showcase_cta_links = pgTable(
  '_pages_v_blocks_product_showcase_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type:
      enum__pages_v_blocks_product_showcase_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_product_showcase_cta_links_link_appearance('link_appearance').default(
        'default',
      ),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_product_showcase_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_product_showcase_cta_links_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('_pages_v_blocks_product_showcase_cta_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_product_showcase.id],
      name: '_pages_v_blocks_product_showcase_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_product_showcase = pgTable(
  '_pages_v_blocks_product_showcase',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    cta_title: varchar('cta_title'),
    cta_description: varchar('cta_description'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_product_showcase_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_product_showcase_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_product_showcase_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_product_showcase_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_product_showcase_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_career_features = pgTable(
  '_pages_v_blocks_career_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    content: varchar('content'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_career_features_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_career_features_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_career_features_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_career.id],
      name: '_pages_v_blocks_career_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_career_cta_links = pgTable(
  '_pages_v_blocks_career_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_blocks_career_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_career_cta_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_career_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_career_cta_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_career_cta_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_career.id],
      name: '_pages_v_blocks_career_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_career = pgTable(
  '_pages_v_blocks_career',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    cta_title: varchar('cta_title'),
    cta_description: varchar('cta_description'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_career_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_career_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_career_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_career_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_career_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_sustainability_features = pgTable(
  '_pages_v_blocks_sustainability_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    content: varchar('content'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_sustainability_features_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_sustainability_features_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('_pages_v_blocks_sustainability_features_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_sustainability.id],
      name: '_pages_v_blocks_sustainability_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_sustainability_cta_links = pgTable(
  '_pages_v_blocks_sustainability_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type:
      enum__pages_v_blocks_sustainability_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_sustainability_cta_links_link_appearance('link_appearance').default(
        'default',
      ),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_sustainability_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_sustainability_cta_links_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('_pages_v_blocks_sustainability_cta_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_sustainability.id],
      name: '_pages_v_blocks_sustainability_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_sustainability = pgTable(
  '_pages_v_blocks_sustainability',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    card_title: varchar('card_title'),
    card_description: jsonb('card_description'),
    cta_title: varchar('cta_title'),
    cta_description: varchar('cta_description'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_sustainability_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_sustainability_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_sustainability_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_sustainability_locale_idx').on(columns._locale),
    _pages_v_blocks_sustainability_image_idx: index('_pages_v_blocks_sustainability_image_idx').on(
      columns.image,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_sustainability_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_content_image = pgTable(
  '_pages_v_blocks_content_image',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    content: jsonb('content'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    layout: enum__pages_v_blocks_content_image_layout('layout').default('left'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_image_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_image_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_content_image_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_content_image_locale_idx').on(columns._locale),
    _pages_v_blocks_content_image_image_idx: index('_pages_v_blocks_content_image_image_idx').on(
      columns.image,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_content_image_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_industry_showcase = pgTable(
  '_pages_v_blocks_industry_showcase',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    limit: numeric('limit').default('3'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_industry_showcase_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_industry_showcase_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_industry_showcase_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_industry_showcase_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_industry_showcase_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_showcase_content_items = pgTable(
  '_pages_v_blocks_showcase_content_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_showcase_content_items_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_showcase_content_items_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('_pages_v_blocks_showcase_content_items_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_showcase.id],
      name: '_pages_v_blocks_showcase_content_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_showcase_features = pgTable(
  '_pages_v_blocks_showcase_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_showcase_features_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_showcase_features_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_showcase_features_locale_idx').on(columns._locale),
    _pages_v_blocks_showcase_features_media_idx: index(
      '_pages_v_blocks_showcase_features_media_idx',
    ).on(columns.media),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_showcase.id],
      name: '_pages_v_blocks_showcase_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_showcase_cta_links = pgTable(
  '_pages_v_blocks_showcase_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_blocks_showcase_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_showcase_cta_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_showcase_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_showcase_cta_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_showcase_cta_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_showcase.id],
      name: '_pages_v_blocks_showcase_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_showcase = pgTable(
  '_pages_v_blocks_showcase',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    type: enum__pages_v_blocks_showcase_type('type').default('product'),
    title: varchar('title'),
    description: varchar('description'),
    showCta: boolean('show_cta').default(true),
    cta_title: varchar('cta_title'),
    cta_description: varchar('cta_description'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_showcase_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_showcase_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_showcase_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_showcase_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_showcase_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_news = pgTable(
  '_pages_v_blocks_news',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title').default('News & Insights'),
    description: varchar('description').default(
      "Stay updated with VUP's latest achievements, innovations, and industry insights.",
    ),
    badge: varchar('badge').default('Latest Updates'),
    linkLabel: varchar('link_label').default('View all news and publications'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_news_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_news_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_news_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_news_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_news_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_product_filter_enabled_filters = pgTable(
  '_pages_v_blocks_product_filter_enabled_filters',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum__pages_v_blocks_product_filter_enabled_filters('value'),
    locale: enum__locales('locale').notNull(),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('_pages_v_blocks_product_filter_enabled_filters_order_idx').on(columns.order),
    parentIdx: index('_pages_v_blocks_product_filter_enabled_filters_parent_idx').on(
      columns.parent,
    ),
    localeIdx: index('_pages_v_blocks_product_filter_enabled_filters_locale_idx').on(
      columns.locale,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_pages_v_blocks_product_filter.id],
      name: '_pages_v_blocks_product_filter_enabled_filters_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_product_filter_cta_links = pgTable(
  '_pages_v_blocks_product_filter_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type:
      enum__pages_v_blocks_product_filter_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_product_filter_cta_links_link_appearance('link_appearance').default(
        'default',
      ),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_product_filter_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_product_filter_cta_links_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('_pages_v_blocks_product_filter_cta_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_product_filter.id],
      name: '_pages_v_blocks_product_filter_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_product_filter = pgTable(
  '_pages_v_blocks_product_filter',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title').default('Product Catalog'),
    description: varchar('description').default(
      'Explore our products by category, industry, and application.',
    ),
    showCta: boolean('show_cta').default(true),
    cta_title: varchar('cta_title'),
    cta_description: varchar('cta_description'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_product_filter_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_product_filter_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_product_filter_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_product_filter_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_product_filter_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_vertical_cards_cards = pgTable(
  '_pages_v_blocks_vertical_cards_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    paragraph: jsonb('paragraph'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_vertical_cards_cards_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_vertical_cards_cards_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_vertical_cards_cards_locale_idx').on(columns._locale),
    _pages_v_blocks_vertical_cards_cards_image_idx: index(
      '_pages_v_blocks_vertical_cards_cards_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_vertical_cards.id],
      name: '_pages_v_blocks_vertical_cards_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_vertical_cards = pgTable(
  '_pages_v_blocks_vertical_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_vertical_cards_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_vertical_cards_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_vertical_cards_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_vertical_cards_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_vertical_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_grid_image_cards_cards_highlights = pgTable(
  '_pages_v_blocks_grid_image_cards_cards_highlights',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    highlight: varchar('highlight'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_grid_image_cards_cards_highlights_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('_pages_v_blocks_grid_image_cards_cards_highlights_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('_pages_v_blocks_grid_image_cards_cards_highlights_locale_idx').on(
      columns._locale,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_grid_image_cards_cards.id],
      name: '_pages_v_blocks_grid_image_cards_cards_highlights_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_grid_image_cards_cards = pgTable(
  '_pages_v_blocks_grid_image_cards_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    title: varchar('title'),
    paragraph: jsonb('paragraph'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_grid_image_cards_cards_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_grid_image_cards_cards_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('_pages_v_blocks_grid_image_cards_cards_locale_idx').on(columns._locale),
    _pages_v_blocks_grid_image_cards_cards_image_idx: index(
      '_pages_v_blocks_grid_image_cards_cards_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_grid_image_cards.id],
      name: '_pages_v_blocks_grid_image_cards_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_grid_image_cards = pgTable(
  '_pages_v_blocks_grid_image_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    badge: varchar('badge'),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_grid_image_cards_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_grid_image_cards_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_grid_image_cards_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_grid_image_cards_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_grid_image_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_careers = pgTable(
  '_pages_v_blocks_careers',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_careers_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_careers_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_careers_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_careers_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_careers_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_certifications_certifications = pgTable(
  '_pages_v_blocks_certifications_certifications',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    description: varchar('description'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_certifications_certifications_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_certifications_certifications_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('_pages_v_blocks_certifications_certifications_locale_idx').on(
      columns._locale,
    ),
    _pages_v_blocks_certifications_certifications_image_idx: index(
      '_pages_v_blocks_certifications_certifications_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_certifications.id],
      name: '_pages_v_blocks_certifications_certifications_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_certifications = pgTable(
  '_pages_v_blocks_certifications',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    featuredCertification_title: varchar('featured_certification_title'),
    featuredCertification_subtitle: varchar('featured_certification_subtitle'),
    featuredCertification_description: varchar('featured_certification_description'),
    featuredCertification_articleLink: varchar('featured_certification_article_link'),
    featuredCertification_image: integer('featured_certification_image_id').references(
      () => media.id,
      {
        onDelete: 'set null',
      },
    ),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_certifications_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_certifications_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_certifications_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_certifications_locale_idx').on(columns._locale),
    _pages_v_blocks_certifications_featured_certification_featured_certification_image_idx: index(
      '_pages_v_blocks_certifications_featured_certification_featured_certification_image_idx',
    ).on(columns.featuredCertification_image),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_certifications_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_timeline_items_key_achievements = pgTable(
  '_pages_v_blocks_timeline_items_key_achievements',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    achievement: varchar('achievement'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_timeline_items_key_achievements_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('_pages_v_blocks_timeline_items_key_achievements_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('_pages_v_blocks_timeline_items_key_achievements_locale_idx').on(
      columns._locale,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_timeline_items.id],
      name: '_pages_v_blocks_timeline_items_key_achievements_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_timeline_items = pgTable(
  '_pages_v_blocks_timeline_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    period: varchar('period'),
    content: jsonb('content'),
    imageUrl: integer('image_url_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    highlight: varchar('highlight'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_timeline_items_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_timeline_items_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_timeline_items_locale_idx').on(columns._locale),
    _pages_v_blocks_timeline_items_image_url_idx: index(
      '_pages_v_blocks_timeline_items_image_url_idx',
    ).on(columns.imageUrl),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_timeline.id],
      name: '_pages_v_blocks_timeline_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_timeline = pgTable(
  '_pages_v_blocks_timeline',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    badge: varchar('badge'),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_timeline_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_timeline_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_timeline_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_timeline_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_timeline_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_team = pgTable(
  '_pages_v_blocks_team',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_team_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_team_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_team_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_team_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_team_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v = pgTable(
  '_pages_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__pages_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    snapshot: boolean('snapshot'),
    publishedLocale: enum__pages_v_published_locale('published_locale'),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _pages_v_parent_idx: index('_pages_v_parent_idx').on(columns.parent),
    _pages_v_version_version_updated_at_idx: index('_pages_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _pages_v_version_version_created_at_idx: index('_pages_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _pages_v_version_version__status_idx: index('_pages_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _pages_v_created_at_idx: index('_pages_v_created_at_idx').on(columns.createdAt),
    _pages_v_updated_at_idx: index('_pages_v_updated_at_idx').on(columns.updatedAt),
    _pages_v_snapshot_idx: index('_pages_v_snapshot_idx').on(columns.snapshot),
    _pages_v_published_locale_idx: index('_pages_v_published_locale_idx').on(
      columns.publishedLocale,
    ),
    _pages_v_latest_idx: index('_pages_v_latest_idx').on(columns.latest),
    _pages_v_autosave_idx: index('_pages_v_autosave_idx').on(columns.autosave),
  }),
)

export const _pages_v_locales = pgTable(
  '_pages_v_locales',
  {
    version_title: varchar('version_title'),
    version_hero_type: enum__pages_v_version_hero_type('version_hero_type').default('carousel'),
    version_hero_title: varchar('version_hero_title'),
    version_hero_description: varchar('version_hero_description'),
    version_hero_media: integer('version_hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_slug: varchar('version_slug'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _pages_v_version_hero_version_hero_media_idx: index(
      '_pages_v_version_hero_version_hero_media_idx',
    ).on(columns.version_hero_media),
    _pages_v_version_meta_version_meta_image_idx: index(
      '_pages_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _pages_v_version_version_slug_idx: index('_pages_v_version_version_slug_idx').on(
      columns.version_slug,
      columns._locale,
    ),
    _localeParent: uniqueIndex('_pages_v_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_rels = pgTable(
  '_pages_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    locale: enum__locales('locale'),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    productsID: integer('products_id'),
    industriesID: integer('industries_id'),
    productCategoriesID: integer('product_categories_id'),
    careersID: integer('careers_id'),
    teamMembersID: integer('team_members_id'),
  },
  (columns) => ({
    order: index('_pages_v_rels_order_idx').on(columns.order),
    parentIdx: index('_pages_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_pages_v_rels_path_idx').on(columns.path),
    localeIdx: index('_pages_v_rels_locale_idx').on(columns.locale),
    _pages_v_rels_pages_id_idx: index('_pages_v_rels_pages_id_idx').on(
      columns.pagesID,
      columns.locale,
    ),
    _pages_v_rels_posts_id_idx: index('_pages_v_rels_posts_id_idx').on(
      columns.postsID,
      columns.locale,
    ),
    _pages_v_rels_products_id_idx: index('_pages_v_rels_products_id_idx').on(
      columns.productsID,
      columns.locale,
    ),
    _pages_v_rels_industries_id_idx: index('_pages_v_rels_industries_id_idx').on(
      columns.industriesID,
      columns.locale,
    ),
    _pages_v_rels_product_categories_id_idx: index('_pages_v_rels_product_categories_id_idx').on(
      columns.productCategoriesID,
      columns.locale,
    ),
    _pages_v_rels_careers_id_idx: index('_pages_v_rels_careers_id_idx').on(
      columns.careersID,
      columns.locale,
    ),
    _pages_v_rels_team_members_id_idx: index('_pages_v_rels_team_members_id_idx').on(
      columns.teamMembersID,
      columns.locale,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: '_pages_v_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_pages_v_rels_posts_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: '_pages_v_rels_products_fk',
    }).onDelete('cascade'),
    industriesIdFk: foreignKey({
      columns: [columns['industriesID']],
      foreignColumns: [industries.id],
      name: '_pages_v_rels_industries_fk',
    }).onDelete('cascade'),
    productCategoriesIdFk: foreignKey({
      columns: [columns['productCategoriesID']],
      foreignColumns: [product_categories.id],
      name: '_pages_v_rels_product_categories_fk',
    }).onDelete('cascade'),
    careersIdFk: foreignKey({
      columns: [columns['careersID']],
      foreignColumns: [careers.id],
      name: '_pages_v_rels_careers_fk',
    }).onDelete('cascade'),
    teamMembersIdFk: foreignKey({
      columns: [columns['teamMembersID']],
      foreignColumns: [team_members.id],
      name: '_pages_v_rels_team_members_fk',
    }).onDelete('cascade'),
  }),
)

export const posts_tags = pgTable(
  'posts_tags',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    tag: varchar('tag'),
  },
  (columns) => ({
    _orderIdx: index('posts_tags_order_idx').on(columns._order),
    _parentIDIdx: index('posts_tags_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_tags_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const posts = pgTable(
  'posts',
  {
    id: serial('id').primaryKey(),
    type: enum_posts_type('type'),
    featured: boolean('featured').default(false),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    author: integer('author_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_posts_status('_status').default('draft'),
  },
  (columns) => ({
    posts_author_idx: index('posts_author_idx').on(columns.author),
    posts_slug_idx: index('posts_slug_idx').on(columns.slug),
    posts_updated_at_idx: index('posts_updated_at_idx').on(columns.updatedAt),
    posts_created_at_idx: index('posts_created_at_idx').on(columns.createdAt),
    posts__status_idx: index('posts__status_idx').on(columns._status),
  }),
)

export const posts_locales = pgTable(
  'posts_locales',
  {
    title: varchar('title'),
    description: varchar('description'),
    featuredImage: integer('featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    posts_featured_image_idx: index('posts_featured_image_idx').on(
      columns.featuredImage,
      columns._locale,
    ),
    posts_meta_meta_image_idx: index('posts_meta_meta_image_idx').on(columns.meta_image),
    _localeParent: uniqueIndex('posts_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const posts_rels = pgTable(
  'posts_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    productsID: integer('products_id'),
    servicesID: integer('services_id'),
    industriesID: integer('industries_id'),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('posts_rels_order_idx').on(columns.order),
    parentIdx: index('posts_rels_parent_idx').on(columns.parent),
    pathIdx: index('posts_rels_path_idx').on(columns.path),
    posts_rels_products_id_idx: index('posts_rels_products_id_idx').on(columns.productsID),
    posts_rels_services_id_idx: index('posts_rels_services_id_idx').on(columns.servicesID),
    posts_rels_industries_id_idx: index('posts_rels_industries_id_idx').on(columns.industriesID),
    posts_rels_posts_id_idx: index('posts_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [posts.id],
      name: 'posts_rels_parent_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'posts_rels_products_fk',
    }).onDelete('cascade'),
    servicesIdFk: foreignKey({
      columns: [columns['servicesID']],
      foreignColumns: [services.id],
      name: 'posts_rels_services_fk',
    }).onDelete('cascade'),
    industriesIdFk: foreignKey({
      columns: [columns['industriesID']],
      foreignColumns: [industries.id],
      name: 'posts_rels_industries_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'posts_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v_version_tags = pgTable(
  '_posts_v_version_tags',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    tag: varchar('tag'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_posts_v_version_tags_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_version_tags_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_version_tags_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v = pgTable(
  '_posts_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => posts.id, {
      onDelete: 'set null',
    }),
    version_type: enum__posts_v_version_type('version_type'),
    version_featured: boolean('version_featured').default(false),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_author: integer('version_author_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__posts_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    snapshot: boolean('snapshot'),
    publishedLocale: enum__posts_v_published_locale('published_locale'),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _posts_v_parent_idx: index('_posts_v_parent_idx').on(columns.parent),
    _posts_v_version_version_author_idx: index('_posts_v_version_version_author_idx').on(
      columns.version_author,
    ),
    _posts_v_version_version_slug_idx: index('_posts_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _posts_v_version_version_updated_at_idx: index('_posts_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _posts_v_version_version_created_at_idx: index('_posts_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _posts_v_version_version__status_idx: index('_posts_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _posts_v_created_at_idx: index('_posts_v_created_at_idx').on(columns.createdAt),
    _posts_v_updated_at_idx: index('_posts_v_updated_at_idx').on(columns.updatedAt),
    _posts_v_snapshot_idx: index('_posts_v_snapshot_idx').on(columns.snapshot),
    _posts_v_published_locale_idx: index('_posts_v_published_locale_idx').on(
      columns.publishedLocale,
    ),
    _posts_v_latest_idx: index('_posts_v_latest_idx').on(columns.latest),
    _posts_v_autosave_idx: index('_posts_v_autosave_idx').on(columns.autosave),
  }),
)

export const _posts_v_locales = pgTable(
  '_posts_v_locales',
  {
    version_title: varchar('version_title'),
    version_description: varchar('version_description'),
    version_featuredImage: integer('version_featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _posts_v_version_version_featured_image_idx: index(
      '_posts_v_version_version_featured_image_idx',
    ).on(columns.version_featuredImage, columns._locale),
    _posts_v_version_meta_version_meta_image_idx: index(
      '_posts_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _localeParent: uniqueIndex('_posts_v_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v_rels = pgTable(
  '_posts_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    productsID: integer('products_id'),
    servicesID: integer('services_id'),
    industriesID: integer('industries_id'),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('_posts_v_rels_order_idx').on(columns.order),
    parentIdx: index('_posts_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_posts_v_rels_path_idx').on(columns.path),
    _posts_v_rels_products_id_idx: index('_posts_v_rels_products_id_idx').on(columns.productsID),
    _posts_v_rels_services_id_idx: index('_posts_v_rels_services_id_idx').on(columns.servicesID),
    _posts_v_rels_industries_id_idx: index('_posts_v_rels_industries_id_idx').on(
      columns.industriesID,
    ),
    _posts_v_rels_posts_id_idx: index('_posts_v_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_rels_parent_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: '_posts_v_rels_products_fk',
    }).onDelete('cascade'),
    servicesIdFk: foreignKey({
      columns: [columns['servicesID']],
      foreignColumns: [services.id],
      name: '_posts_v_rels_services_fk',
    }).onDelete('cascade'),
    industriesIdFk: foreignKey({
      columns: [columns['industriesID']],
      foreignColumns: [industries.id],
      name: '_posts_v_rels_industries_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_posts_v_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt'),
    caption: jsonb('caption'),
    prefix: varchar('prefix').default('media'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
    sizes_square_url: varchar('sizes_square_url'),
    sizes_square_width: numeric('sizes_square_width'),
    sizes_square_height: numeric('sizes_square_height'),
    sizes_square_mimeType: varchar('sizes_square_mime_type'),
    sizes_square_filesize: numeric('sizes_square_filesize'),
    sizes_square_filename: varchar('sizes_square_filename'),
    sizes_small_url: varchar('sizes_small_url'),
    sizes_small_width: numeric('sizes_small_width'),
    sizes_small_height: numeric('sizes_small_height'),
    sizes_small_mimeType: varchar('sizes_small_mime_type'),
    sizes_small_filesize: numeric('sizes_small_filesize'),
    sizes_small_filename: varchar('sizes_small_filename'),
    sizes_medium_url: varchar('sizes_medium_url'),
    sizes_medium_width: numeric('sizes_medium_width'),
    sizes_medium_height: numeric('sizes_medium_height'),
    sizes_medium_mimeType: varchar('sizes_medium_mime_type'),
    sizes_medium_filesize: numeric('sizes_medium_filesize'),
    sizes_medium_filename: varchar('sizes_medium_filename'),
    sizes_large_url: varchar('sizes_large_url'),
    sizes_large_width: numeric('sizes_large_width'),
    sizes_large_height: numeric('sizes_large_height'),
    sizes_large_mimeType: varchar('sizes_large_mime_type'),
    sizes_large_filesize: numeric('sizes_large_filesize'),
    sizes_large_filename: varchar('sizes_large_filename'),
    sizes_og_url: varchar('sizes_og_url'),
    sizes_og_width: numeric('sizes_og_width'),
    sizes_og_height: numeric('sizes_og_height'),
    sizes_og_mimeType: varchar('sizes_og_mime_type'),
    sizes_og_filesize: numeric('sizes_og_filesize'),
    sizes_og_filename: varchar('sizes_og_filename'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_square_sizes_square_filename_idx: index(
      'media_sizes_square_sizes_square_filename_idx',
    ).on(columns.sizes_square_filename),
    media_sizes_small_sizes_small_filename_idx: index(
      'media_sizes_small_sizes_small_filename_idx',
    ).on(columns.sizes_small_filename),
    media_sizes_medium_sizes_medium_filename_idx: index(
      'media_sizes_medium_sizes_medium_filename_idx',
    ).on(columns.sizes_medium_filename),
    media_sizes_large_sizes_large_filename_idx: index(
      'media_sizes_large_sizes_large_filename_idx',
    ).on(columns.sizes_large_filename),
    media_sizes_og_sizes_og_filename_idx: index('media_sizes_og_sizes_og_filename_idx').on(
      columns.sizes_og_filename,
    ),
  }),
)

export const product_categories_applications = pgTable(
  'product_categories_applications',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    imageSrc: integer('image_src_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    title: varchar('title'),
    description: varchar('description'),
  },
  (columns) => ({
    _orderIdx: index('product_categories_applications_order_idx').on(columns._order),
    _parentIDIdx: index('product_categories_applications_parent_id_idx').on(columns._parentID),
    _localeIdx: index('product_categories_applications_locale_idx').on(columns._locale),
    product_categories_applications_image_src_idx: index(
      'product_categories_applications_image_src_idx',
    ).on(columns.imageSrc),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [product_categories.id],
      name: 'product_categories_applications_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const product_categories_breadcrumbs = pgTable(
  'product_categories_breadcrumbs',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    doc: integer('doc_id').references(() => product_categories.id, {
      onDelete: 'set null',
    }),
    url: varchar('url'),
    label: varchar('label'),
  },
  (columns) => ({
    _orderIdx: index('product_categories_breadcrumbs_order_idx').on(columns._order),
    _parentIDIdx: index('product_categories_breadcrumbs_parent_id_idx').on(columns._parentID),
    _localeIdx: index('product_categories_breadcrumbs_locale_idx').on(columns._locale),
    product_categories_breadcrumbs_doc_idx: index('product_categories_breadcrumbs_doc_idx').on(
      columns.doc,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [product_categories.id],
      name: 'product_categories_breadcrumbs_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const product_categories = pgTable(
  'product_categories',
  {
    id: serial('id').primaryKey(),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    productComparison: boolean('product_comparison').default(false),
    parent: integer('parent_id').references((): AnyPgColumn => product_categories.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    product_categories_image_idx: index('product_categories_image_idx').on(columns.image),
    product_categories_slug_idx: index('product_categories_slug_idx').on(columns.slug),
    product_categories_parent_idx: index('product_categories_parent_idx').on(columns.parent),
    product_categories_updated_at_idx: index('product_categories_updated_at_idx').on(
      columns.updatedAt,
    ),
    product_categories_created_at_idx: index('product_categories_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const product_categories_locales = pgTable(
  'product_categories_locales',
  {
    name: varchar('name').notNull(),
    description: varchar('description').notNull(),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('product_categories_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [product_categories.id],
      name: 'product_categories_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const product_categories_rels = pgTable(
  'product_categories_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    productsID: integer('products_id'),
  },
  (columns) => ({
    order: index('product_categories_rels_order_idx').on(columns.order),
    parentIdx: index('product_categories_rels_parent_idx').on(columns.parent),
    pathIdx: index('product_categories_rels_path_idx').on(columns.path),
    product_categories_rels_products_id_idx: index('product_categories_rels_products_id_idx').on(
      columns.productsID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [product_categories.id],
      name: 'product_categories_rels_parent_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'product_categories_rels_products_fk',
    }).onDelete('cascade'),
  }),
)

export const users_sessions = pgTable(
  'users_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('users_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('users_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const products_technical_specifications_synonyms = pgTable(
  'products_technical_specifications_synonyms',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    synonym: varchar('synonym'),
  },
  (columns) => ({
    _orderIdx: index('products_technical_specifications_synonyms_order_idx').on(columns._order),
    _parentIDIdx: index('products_technical_specifications_synonyms_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_technical_specifications_synonyms_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_applications = pgTable(
  'products_applications',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    application: varchar('application'),
    description: varchar('description'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('products_applications_order_idx').on(columns._order),
    _parentIDIdx: index('products_applications_parent_id_idx').on(columns._parentID),
    _localeIdx: index('products_applications_locale_idx').on(columns._locale),
    products_applications_image_idx: index('products_applications_image_idx').on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_applications_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_key_features = pgTable(
  'products_key_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    feature: varchar('feature'),
    description: varchar('description'),
  },
  (columns) => ({
    _orderIdx: index('products_key_features_order_idx').on(columns._order),
    _parentIDIdx: index('products_key_features_parent_id_idx').on(columns._parentID),
    _localeIdx: index('products_key_features_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_key_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_faq = pgTable(
  'products_faq',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    question: varchar('question'),
    answer: varchar('answer'),
  },
  (columns) => ({
    _orderIdx: index('products_faq_order_idx').on(columns._order),
    _parentIDIdx: index('products_faq_parent_id_idx').on(columns._parentID),
    _localeIdx: index('products_faq_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_faq_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products = pgTable(
  'products',
  {
    id: serial('id').primaryKey(),
    chemicalStructureImage: integer('chemical_structure_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    technicalSpecifications_chemicalName: varchar('technical_specifications_chemical_name'),
    technicalSpecifications_casNumber: varchar('technical_specifications_cas_number'),
    technicalSpecifications_ecNumber: varchar('technical_specifications_ec_number'),
    technicalSpecifications_molecularFormula: varchar('technical_specifications_molecular_formula'),
    technicalSpecifications_molecularWeight: varchar('technical_specifications_molecular_weight'),
    technicalSpecifications_labVerified: enum_products_technical_specifications_lab_verified(
      'technical_specifications_lab_verified',
    ),
    VupSpecifications_purity: varchar('vup_specifications_purity'),
    VupSpecifications_acidValue: varchar('vup_specifications_acid_value'),
    VupSpecifications_hydroxylValue: varchar('vup_specifications_hydroxyl_value'),
    VupSpecifications_waterContent: varchar('vup_specifications_water_content'),
    VupSpecifications_ashContent: varchar('vup_specifications_ash_content'),
    VupSpecifications_meltingPoint: varchar('vup_specifications_melting_point'),
    VupSpecifications_boilingPoint: varchar('vup_specifications_boiling_point'),
    VupSpecifications_density: varchar('vup_specifications_density'),
    technicalDataSheets: integer('technical_data_sheets_id').references(
      () => product_documents.id,
      {
        onDelete: 'set null',
      },
    ),
    safetyDataSheets: integer('safety_data_sheets_id').references(() => product_documents.id, {
      onDelete: 'set null',
    }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_products_status('_status').default('draft'),
  },
  (columns) => ({
    products_chemical_structure_image_idx: index('products_chemical_structure_image_idx').on(
      columns.chemicalStructureImage,
    ),
    products_technical_data_sheets_idx: index('products_technical_data_sheets_idx').on(
      columns.technicalDataSheets,
    ),
    products_safety_data_sheets_idx: index('products_safety_data_sheets_idx').on(
      columns.safetyDataSheets,
    ),
    products_slug_idx: index('products_slug_idx').on(columns.slug),
    products_updated_at_idx: index('products_updated_at_idx').on(columns.updatedAt),
    products_created_at_idx: index('products_created_at_idx').on(columns.createdAt),
    products__status_idx: index('products__status_idx').on(columns._status),
  }),
)

export const products_locales = pgTable(
  'products_locales',
  {
    name: varchar('name'),
    description: varchar('description'),
    VupSpecifications_appearance: varchar('vup_specifications_appearance'),
    VupSpecifications_solubility: varchar('vup_specifications_solubility'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('products_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_rels = pgTable(
  'products_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    productCategoriesID: integer('product_categories_id'),
    caseStudiesID: integer('case_studies_id'),
    productsID: integer('products_id'),
  },
  (columns) => ({
    order: index('products_rels_order_idx').on(columns.order),
    parentIdx: index('products_rels_parent_idx').on(columns.parent),
    pathIdx: index('products_rels_path_idx').on(columns.path),
    products_rels_product_categories_id_idx: index('products_rels_product_categories_id_idx').on(
      columns.productCategoriesID,
    ),
    products_rels_case_studies_id_idx: index('products_rels_case_studies_id_idx').on(
      columns.caseStudiesID,
    ),
    products_rels_products_id_idx: index('products_rels_products_id_idx').on(columns.productsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [products.id],
      name: 'products_rels_parent_fk',
    }).onDelete('cascade'),
    productCategoriesIdFk: foreignKey({
      columns: [columns['productCategoriesID']],
      foreignColumns: [product_categories.id],
      name: 'products_rels_product_categories_fk',
    }).onDelete('cascade'),
    caseStudiesIdFk: foreignKey({
      columns: [columns['caseStudiesID']],
      foreignColumns: [case_studies.id],
      name: 'products_rels_case_studies_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'products_rels_products_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_version_technical_specifications_synonyms = pgTable(
  '_products_v_version_technical_specifications_synonyms',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    synonym: varchar('synonym'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_version_technical_specifications_synonyms_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('_products_v_version_technical_specifications_synonyms_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_version_technical_specifications_synonyms_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_version_applications = pgTable(
  '_products_v_version_applications',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    application: varchar('application'),
    description: varchar('description'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_version_applications_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_version_applications_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_products_v_version_applications_locale_idx').on(columns._locale),
    _products_v_version_applications_image_idx: index(
      '_products_v_version_applications_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_version_applications_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_version_key_features = pgTable(
  '_products_v_version_key_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    feature: varchar('feature'),
    description: varchar('description'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_version_key_features_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_version_key_features_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_products_v_version_key_features_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_version_key_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_version_faq = pgTable(
  '_products_v_version_faq',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    question: varchar('question'),
    answer: varchar('answer'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_version_faq_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_version_faq_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_products_v_version_faq_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_version_faq_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v = pgTable(
  '_products_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => products.id, {
      onDelete: 'set null',
    }),
    version_chemicalStructureImage: integer('version_chemical_structure_image_id').references(
      () => media.id,
      {
        onDelete: 'set null',
      },
    ),
    version_technicalSpecifications_chemicalName: varchar(
      'version_technical_specifications_chemical_name',
    ),
    version_technicalSpecifications_casNumber: varchar(
      'version_technical_specifications_cas_number',
    ),
    version_technicalSpecifications_ecNumber: varchar('version_technical_specifications_ec_number'),
    version_technicalSpecifications_molecularFormula: varchar(
      'version_technical_specifications_molecular_formula',
    ),
    version_technicalSpecifications_molecularWeight: varchar(
      'version_technical_specifications_molecular_weight',
    ),
    version_technicalSpecifications_labVerified:
      enum__products_v_version_technical_specifications_lab_verified(
        'version_technical_specifications_lab_verified',
      ),
    version_VupSpecifications_purity: varchar('version_vup_specifications_purity'),
    version_VupSpecifications_acidValue: varchar('version_vup_specifications_acid_value'),
    version_VupSpecifications_hydroxylValue: varchar('version_vup_specifications_hydroxyl_value'),
    version_VupSpecifications_waterContent: varchar('version_vup_specifications_water_content'),
    version_VupSpecifications_ashContent: varchar('version_vup_specifications_ash_content'),
    version_VupSpecifications_meltingPoint: varchar('version_vup_specifications_melting_point'),
    version_VupSpecifications_boilingPoint: varchar('version_vup_specifications_boiling_point'),
    version_VupSpecifications_density: varchar('version_vup_specifications_density'),
    version_technicalDataSheets: integer('version_technical_data_sheets_id').references(
      () => product_documents.id,
      {
        onDelete: 'set null',
      },
    ),
    version_safetyDataSheets: integer('version_safety_data_sheets_id').references(
      () => product_documents.id,
      {
        onDelete: 'set null',
      },
    ),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__products_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    snapshot: boolean('snapshot'),
    publishedLocale: enum__products_v_published_locale('published_locale'),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _products_v_parent_idx: index('_products_v_parent_idx').on(columns.parent),
    _products_v_version_version_chemical_structure_image_idx: index(
      '_products_v_version_version_chemical_structure_image_idx',
    ).on(columns.version_chemicalStructureImage),
    _products_v_version_version_technical_data_sheets_idx: index(
      '_products_v_version_version_technical_data_sheets_idx',
    ).on(columns.version_technicalDataSheets),
    _products_v_version_version_safety_data_sheets_idx: index(
      '_products_v_version_version_safety_data_sheets_idx',
    ).on(columns.version_safetyDataSheets),
    _products_v_version_version_slug_idx: index('_products_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _products_v_version_version_updated_at_idx: index(
      '_products_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _products_v_version_version_created_at_idx: index(
      '_products_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _products_v_version_version__status_idx: index('_products_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _products_v_created_at_idx: index('_products_v_created_at_idx').on(columns.createdAt),
    _products_v_updated_at_idx: index('_products_v_updated_at_idx').on(columns.updatedAt),
    _products_v_snapshot_idx: index('_products_v_snapshot_idx').on(columns.snapshot),
    _products_v_published_locale_idx: index('_products_v_published_locale_idx').on(
      columns.publishedLocale,
    ),
    _products_v_latest_idx: index('_products_v_latest_idx').on(columns.latest),
    _products_v_autosave_idx: index('_products_v_autosave_idx').on(columns.autosave),
  }),
)

export const _products_v_locales = pgTable(
  '_products_v_locales',
  {
    version_name: varchar('version_name'),
    version_description: varchar('version_description'),
    version_VupSpecifications_appearance: varchar('version_vup_specifications_appearance'),
    version_VupSpecifications_solubility: varchar('version_vup_specifications_solubility'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('_products_v_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_rels = pgTable(
  '_products_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    productCategoriesID: integer('product_categories_id'),
    caseStudiesID: integer('case_studies_id'),
    productsID: integer('products_id'),
  },
  (columns) => ({
    order: index('_products_v_rels_order_idx').on(columns.order),
    parentIdx: index('_products_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_products_v_rels_path_idx').on(columns.path),
    _products_v_rels_product_categories_id_idx: index(
      '_products_v_rels_product_categories_id_idx',
    ).on(columns.productCategoriesID),
    _products_v_rels_case_studies_id_idx: index('_products_v_rels_case_studies_id_idx').on(
      columns.caseStudiesID,
    ),
    _products_v_rels_products_id_idx: index('_products_v_rels_products_id_idx').on(
      columns.productsID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_products_v.id],
      name: '_products_v_rels_parent_fk',
    }).onDelete('cascade'),
    productCategoriesIdFk: foreignKey({
      columns: [columns['productCategoriesID']],
      foreignColumns: [product_categories.id],
      name: '_products_v_rels_product_categories_fk',
    }).onDelete('cascade'),
    caseStudiesIdFk: foreignKey({
      columns: [columns['caseStudiesID']],
      foreignColumns: [case_studies.id],
      name: '_products_v_rels_case_studies_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: '_products_v_rels_products_fk',
    }).onDelete('cascade'),
  }),
)

export const industries_challenges = pgTable(
  'industries_challenges',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    challenge: varchar('challenge'),
    solution: varchar('solution'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    challengeLink: varchar('challenge_link'),
  },
  (columns) => ({
    _orderIdx: index('industries_challenges_order_idx').on(columns._order),
    _parentIDIdx: index('industries_challenges_parent_id_idx').on(columns._parentID),
    _localeIdx: index('industries_challenges_locale_idx').on(columns._locale),
    industries_challenges_image_idx: index('industries_challenges_image_idx').on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [industries.id],
      name: 'industries_challenges_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const industries = pgTable(
  'industries',
  {
    id: serial('id').primaryKey(),
    featuredImage: integer('featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_industries_status('_status').default('draft'),
  },
  (columns) => ({
    industries_featured_image_idx: index('industries_featured_image_idx').on(columns.featuredImage),
    industries_slug_idx: index('industries_slug_idx').on(columns.slug),
    industries_updated_at_idx: index('industries_updated_at_idx').on(columns.updatedAt),
    industries_created_at_idx: index('industries_created_at_idx').on(columns.createdAt),
    industries__status_idx: index('industries__status_idx').on(columns._status),
  }),
)

export const industries_locales = pgTable(
  'industries_locales',
  {
    name: varchar('name'),
    description: varchar('description'),
    summary: varchar('summary'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('industries_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [industries.id],
      name: 'industries_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const industries_rels = pgTable(
  'industries_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    locale: enum__locales('locale'),
    productsID: integer('products_id'),
    productCategoriesID: integer('product_categories_id'),
    servicesID: integer('services_id'),
    caseStudiesID: integer('case_studies_id'),
  },
  (columns) => ({
    order: index('industries_rels_order_idx').on(columns.order),
    parentIdx: index('industries_rels_parent_idx').on(columns.parent),
    pathIdx: index('industries_rels_path_idx').on(columns.path),
    localeIdx: index('industries_rels_locale_idx').on(columns.locale),
    industries_rels_products_id_idx: index('industries_rels_products_id_idx').on(
      columns.productsID,
      columns.locale,
    ),
    industries_rels_product_categories_id_idx: index(
      'industries_rels_product_categories_id_idx',
    ).on(columns.productCategoriesID, columns.locale),
    industries_rels_services_id_idx: index('industries_rels_services_id_idx').on(
      columns.servicesID,
      columns.locale,
    ),
    industries_rels_case_studies_id_idx: index('industries_rels_case_studies_id_idx').on(
      columns.caseStudiesID,
      columns.locale,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [industries.id],
      name: 'industries_rels_parent_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'industries_rels_products_fk',
    }).onDelete('cascade'),
    productCategoriesIdFk: foreignKey({
      columns: [columns['productCategoriesID']],
      foreignColumns: [product_categories.id],
      name: 'industries_rels_product_categories_fk',
    }).onDelete('cascade'),
    servicesIdFk: foreignKey({
      columns: [columns['servicesID']],
      foreignColumns: [services.id],
      name: 'industries_rels_services_fk',
    }).onDelete('cascade'),
    caseStudiesIdFk: foreignKey({
      columns: [columns['caseStudiesID']],
      foreignColumns: [case_studies.id],
      name: 'industries_rels_case_studies_fk',
    }).onDelete('cascade'),
  }),
)

export const _industries_v_version_challenges = pgTable(
  '_industries_v_version_challenges',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    challenge: varchar('challenge'),
    solution: varchar('solution'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    challengeLink: varchar('challenge_link'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_industries_v_version_challenges_order_idx').on(columns._order),
    _parentIDIdx: index('_industries_v_version_challenges_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_industries_v_version_challenges_locale_idx').on(columns._locale),
    _industries_v_version_challenges_image_idx: index(
      '_industries_v_version_challenges_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_industries_v.id],
      name: '_industries_v_version_challenges_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _industries_v = pgTable(
  '_industries_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => industries.id, {
      onDelete: 'set null',
    }),
    version_featuredImage: integer('version_featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__industries_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    snapshot: boolean('snapshot'),
    publishedLocale: enum__industries_v_published_locale('published_locale'),
    latest: boolean('latest'),
  },
  (columns) => ({
    _industries_v_parent_idx: index('_industries_v_parent_idx').on(columns.parent),
    _industries_v_version_version_featured_image_idx: index(
      '_industries_v_version_version_featured_image_idx',
    ).on(columns.version_featuredImage),
    _industries_v_version_version_slug_idx: index('_industries_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _industries_v_version_version_updated_at_idx: index(
      '_industries_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _industries_v_version_version_created_at_idx: index(
      '_industries_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _industries_v_version_version__status_idx: index(
      '_industries_v_version_version__status_idx',
    ).on(columns.version__status),
    _industries_v_created_at_idx: index('_industries_v_created_at_idx').on(columns.createdAt),
    _industries_v_updated_at_idx: index('_industries_v_updated_at_idx').on(columns.updatedAt),
    _industries_v_snapshot_idx: index('_industries_v_snapshot_idx').on(columns.snapshot),
    _industries_v_published_locale_idx: index('_industries_v_published_locale_idx').on(
      columns.publishedLocale,
    ),
    _industries_v_latest_idx: index('_industries_v_latest_idx').on(columns.latest),
  }),
)

export const _industries_v_locales = pgTable(
  '_industries_v_locales',
  {
    version_name: varchar('version_name'),
    version_description: varchar('version_description'),
    version_summary: varchar('version_summary'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('_industries_v_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_industries_v.id],
      name: '_industries_v_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _industries_v_rels = pgTable(
  '_industries_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    locale: enum__locales('locale'),
    productsID: integer('products_id'),
    productCategoriesID: integer('product_categories_id'),
    servicesID: integer('services_id'),
    caseStudiesID: integer('case_studies_id'),
  },
  (columns) => ({
    order: index('_industries_v_rels_order_idx').on(columns.order),
    parentIdx: index('_industries_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_industries_v_rels_path_idx').on(columns.path),
    localeIdx: index('_industries_v_rels_locale_idx').on(columns.locale),
    _industries_v_rels_products_id_idx: index('_industries_v_rels_products_id_idx').on(
      columns.productsID,
      columns.locale,
    ),
    _industries_v_rels_product_categories_id_idx: index(
      '_industries_v_rels_product_categories_id_idx',
    ).on(columns.productCategoriesID, columns.locale),
    _industries_v_rels_services_id_idx: index('_industries_v_rels_services_id_idx').on(
      columns.servicesID,
      columns.locale,
    ),
    _industries_v_rels_case_studies_id_idx: index('_industries_v_rels_case_studies_id_idx').on(
      columns.caseStudiesID,
      columns.locale,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_industries_v.id],
      name: '_industries_v_rels_parent_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: '_industries_v_rels_products_fk',
    }).onDelete('cascade'),
    productCategoriesIdFk: foreignKey({
      columns: [columns['productCategoriesID']],
      foreignColumns: [product_categories.id],
      name: '_industries_v_rels_product_categories_fk',
    }).onDelete('cascade'),
    servicesIdFk: foreignKey({
      columns: [columns['servicesID']],
      foreignColumns: [services.id],
      name: '_industries_v_rels_services_fk',
    }).onDelete('cascade'),
    caseStudiesIdFk: foreignKey({
      columns: [columns['caseStudiesID']],
      foreignColumns: [case_studies.id],
      name: '_industries_v_rels_case_studies_fk',
    }).onDelete('cascade'),
  }),
)

export const case_studies = pgTable(
  'case_studies',
  {
    id: serial('id').primaryKey(),
    featured: boolean('featured').default(false),
    featuredImage: integer('featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    industry: integer('industry_id').references(() => industries.id, {
      onDelete: 'set null',
    }),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_case_studies_status('_status').default('draft'),
  },
  (columns) => ({
    case_studies_featured_image_idx: index('case_studies_featured_image_idx').on(
      columns.featuredImage,
    ),
    case_studies_industry_idx: index('case_studies_industry_idx').on(columns.industry),
    case_studies_slug_idx: index('case_studies_slug_idx').on(columns.slug),
    case_studies_updated_at_idx: index('case_studies_updated_at_idx').on(columns.updatedAt),
    case_studies_created_at_idx: index('case_studies_created_at_idx').on(columns.createdAt),
    case_studies__status_idx: index('case_studies__status_idx').on(columns._status),
  }),
)

export const case_studies_locales = pgTable(
  'case_studies_locales',
  {
    title: varchar('title'),
    summary: varchar('summary'),
    challenge: varchar('challenge'),
    solution: jsonb('solution'),
    results: varchar('results'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    case_studies_meta_meta_image_idx: index('case_studies_meta_meta_image_idx').on(
      columns.meta_image,
    ),
    _localeParent: uniqueIndex('case_studies_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [case_studies.id],
      name: 'case_studies_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const case_studies_rels = pgTable(
  'case_studies_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    productsID: integer('products_id'),
    servicesID: integer('services_id'),
  },
  (columns) => ({
    order: index('case_studies_rels_order_idx').on(columns.order),
    parentIdx: index('case_studies_rels_parent_idx').on(columns.parent),
    pathIdx: index('case_studies_rels_path_idx').on(columns.path),
    case_studies_rels_products_id_idx: index('case_studies_rels_products_id_idx').on(
      columns.productsID,
    ),
    case_studies_rels_services_id_idx: index('case_studies_rels_services_id_idx').on(
      columns.servicesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [case_studies.id],
      name: 'case_studies_rels_parent_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'case_studies_rels_products_fk',
    }).onDelete('cascade'),
    servicesIdFk: foreignKey({
      columns: [columns['servicesID']],
      foreignColumns: [services.id],
      name: 'case_studies_rels_services_fk',
    }).onDelete('cascade'),
  }),
)

export const _case_studies_v = pgTable(
  '_case_studies_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => case_studies.id, {
      onDelete: 'set null',
    }),
    version_featured: boolean('version_featured').default(false),
    version_featuredImage: integer('version_featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_industry: integer('version_industry_id').references(() => industries.id, {
      onDelete: 'set null',
    }),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__case_studies_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    snapshot: boolean('snapshot'),
    publishedLocale: enum__case_studies_v_published_locale('published_locale'),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _case_studies_v_parent_idx: index('_case_studies_v_parent_idx').on(columns.parent),
    _case_studies_v_version_version_featured_image_idx: index(
      '_case_studies_v_version_version_featured_image_idx',
    ).on(columns.version_featuredImage),
    _case_studies_v_version_version_industry_idx: index(
      '_case_studies_v_version_version_industry_idx',
    ).on(columns.version_industry),
    _case_studies_v_version_version_slug_idx: index('_case_studies_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _case_studies_v_version_version_updated_at_idx: index(
      '_case_studies_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _case_studies_v_version_version_created_at_idx: index(
      '_case_studies_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _case_studies_v_version_version__status_idx: index(
      '_case_studies_v_version_version__status_idx',
    ).on(columns.version__status),
    _case_studies_v_created_at_idx: index('_case_studies_v_created_at_idx').on(columns.createdAt),
    _case_studies_v_updated_at_idx: index('_case_studies_v_updated_at_idx').on(columns.updatedAt),
    _case_studies_v_snapshot_idx: index('_case_studies_v_snapshot_idx').on(columns.snapshot),
    _case_studies_v_published_locale_idx: index('_case_studies_v_published_locale_idx').on(
      columns.publishedLocale,
    ),
    _case_studies_v_latest_idx: index('_case_studies_v_latest_idx').on(columns.latest),
    _case_studies_v_autosave_idx: index('_case_studies_v_autosave_idx').on(columns.autosave),
  }),
)

export const _case_studies_v_locales = pgTable(
  '_case_studies_v_locales',
  {
    version_title: varchar('version_title'),
    version_summary: varchar('version_summary'),
    version_challenge: varchar('version_challenge'),
    version_solution: jsonb('version_solution'),
    version_results: varchar('version_results'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _case_studies_v_version_meta_version_meta_image_idx: index(
      '_case_studies_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _localeParent: uniqueIndex('_case_studies_v_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_case_studies_v.id],
      name: '_case_studies_v_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _case_studies_v_rels = pgTable(
  '_case_studies_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    productsID: integer('products_id'),
    servicesID: integer('services_id'),
  },
  (columns) => ({
    order: index('_case_studies_v_rels_order_idx').on(columns.order),
    parentIdx: index('_case_studies_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_case_studies_v_rels_path_idx').on(columns.path),
    _case_studies_v_rels_products_id_idx: index('_case_studies_v_rels_products_id_idx').on(
      columns.productsID,
    ),
    _case_studies_v_rels_services_id_idx: index('_case_studies_v_rels_services_id_idx').on(
      columns.servicesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_case_studies_v.id],
      name: '_case_studies_v_rels_parent_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: '_case_studies_v_rels_products_fk',
    }).onDelete('cascade'),
    servicesIdFk: foreignKey({
      columns: [columns['servicesID']],
      foreignColumns: [services.id],
      name: '_case_studies_v_rels_services_fk',
    }).onDelete('cascade'),
  }),
)

export const services_accreditations = pgTable(
  'services_accreditations',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    accreditation: varchar('accreditation'),
  },
  (columns) => ({
    _orderIdx: index('services_accreditations_order_idx').on(columns._order),
    _parentIDIdx: index('services_accreditations_parent_id_idx').on(columns._parentID),
    _localeIdx: index('services_accreditations_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [services.id],
      name: 'services_accreditations_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const services_sub_services_display_items = pgTable(
  'services_sub_services_display_items',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    item: varchar('item'),
  },
  (columns) => ({
    _orderIdx: index('services_sub_services_display_items_order_idx').on(columns._order),
    _parentIDIdx: index('services_sub_services_display_items_parent_id_idx').on(columns._parentID),
    _localeIdx: index('services_sub_services_display_items_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [services_sub_services.id],
      name: 'services_sub_services_display_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const services_sub_services_features = pgTable(
  'services_sub_services_features',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    feature: varchar('feature'),
    description: varchar('description'),
  },
  (columns) => ({
    _orderIdx: index('services_sub_services_features_order_idx').on(columns._order),
    _parentIDIdx: index('services_sub_services_features_parent_id_idx').on(columns._parentID),
    _localeIdx: index('services_sub_services_features_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [services_sub_services.id],
      name: 'services_sub_services_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const services_sub_services = pgTable(
  'services_sub_services',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    link: varchar('link'),
  },
  (columns) => ({
    _orderIdx: index('services_sub_services_order_idx').on(columns._order),
    _parentIDIdx: index('services_sub_services_parent_id_idx').on(columns._parentID),
    _localeIdx: index('services_sub_services_locale_idx').on(columns._locale),
    services_sub_services_image_idx: index('services_sub_services_image_idx').on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [services.id],
      name: 'services_sub_services_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const services_features = pgTable(
  'services_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    feature: varchar('feature'),
    description: varchar('description'),
  },
  (columns) => ({
    _orderIdx: index('services_features_order_idx').on(columns._order),
    _parentIDIdx: index('services_features_parent_id_idx').on(columns._parentID),
    _localeIdx: index('services_features_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [services.id],
      name: 'services_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const services = pgTable(
  'services',
  {
    id: serial('id').primaryKey(),
    featuredImage: integer('featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_services_status('_status').default('draft'),
  },
  (columns) => ({
    services_featured_image_idx: index('services_featured_image_idx').on(columns.featuredImage),
    services_slug_idx: index('services_slug_idx').on(columns.slug),
    services_updated_at_idx: index('services_updated_at_idx').on(columns.updatedAt),
    services_created_at_idx: index('services_created_at_idx').on(columns.createdAt),
    services__status_idx: index('services__status_idx').on(columns._status),
  }),
)

export const services_locales = pgTable(
  'services_locales',
  {
    title: varchar('title'),
    description: varchar('description'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('services_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [services.id],
      name: 'services_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const services_rels = pgTable(
  'services_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    teamMembersID: integer('team_members_id'),
    caseStudiesID: integer('case_studies_id'),
    industriesID: integer('industries_id'),
  },
  (columns) => ({
    order: index('services_rels_order_idx').on(columns.order),
    parentIdx: index('services_rels_parent_idx').on(columns.parent),
    pathIdx: index('services_rels_path_idx').on(columns.path),
    services_rels_team_members_id_idx: index('services_rels_team_members_id_idx').on(
      columns.teamMembersID,
    ),
    services_rels_case_studies_id_idx: index('services_rels_case_studies_id_idx').on(
      columns.caseStudiesID,
    ),
    services_rels_industries_id_idx: index('services_rels_industries_id_idx').on(
      columns.industriesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [services.id],
      name: 'services_rels_parent_fk',
    }).onDelete('cascade'),
    teamMembersIdFk: foreignKey({
      columns: [columns['teamMembersID']],
      foreignColumns: [team_members.id],
      name: 'services_rels_team_members_fk',
    }).onDelete('cascade'),
    caseStudiesIdFk: foreignKey({
      columns: [columns['caseStudiesID']],
      foreignColumns: [case_studies.id],
      name: 'services_rels_case_studies_fk',
    }).onDelete('cascade'),
    industriesIdFk: foreignKey({
      columns: [columns['industriesID']],
      foreignColumns: [industries.id],
      name: 'services_rels_industries_fk',
    }).onDelete('cascade'),
  }),
)

export const _services_v_version_accreditations = pgTable(
  '_services_v_version_accreditations',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    accreditation: varchar('accreditation'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_services_v_version_accreditations_order_idx').on(columns._order),
    _parentIDIdx: index('_services_v_version_accreditations_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_services_v_version_accreditations_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_services_v.id],
      name: '_services_v_version_accreditations_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _services_v_version_sub_services_display_items = pgTable(
  '_services_v_version_sub_services_display_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    item: varchar('item'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_services_v_version_sub_services_display_items_order_idx').on(columns._order),
    _parentIDIdx: index('_services_v_version_sub_services_display_items_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('_services_v_version_sub_services_display_items_locale_idx').on(
      columns._locale,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_services_v_version_sub_services.id],
      name: '_services_v_version_sub_services_display_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _services_v_version_sub_services_features = pgTable(
  '_services_v_version_sub_services_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    feature: varchar('feature'),
    description: varchar('description'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_services_v_version_sub_services_features_order_idx').on(columns._order),
    _parentIDIdx: index('_services_v_version_sub_services_features_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('_services_v_version_sub_services_features_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_services_v_version_sub_services.id],
      name: '_services_v_version_sub_services_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _services_v_version_sub_services = pgTable(
  '_services_v_version_sub_services',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    link: varchar('link'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_services_v_version_sub_services_order_idx').on(columns._order),
    _parentIDIdx: index('_services_v_version_sub_services_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_services_v_version_sub_services_locale_idx').on(columns._locale),
    _services_v_version_sub_services_image_idx: index(
      '_services_v_version_sub_services_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_services_v.id],
      name: '_services_v_version_sub_services_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _services_v_version_features = pgTable(
  '_services_v_version_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    feature: varchar('feature'),
    description: varchar('description'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_services_v_version_features_order_idx').on(columns._order),
    _parentIDIdx: index('_services_v_version_features_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_services_v_version_features_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_services_v.id],
      name: '_services_v_version_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _services_v = pgTable(
  '_services_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => services.id, {
      onDelete: 'set null',
    }),
    version_featuredImage: integer('version_featured_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__services_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    snapshot: boolean('snapshot'),
    publishedLocale: enum__services_v_published_locale('published_locale'),
    latest: boolean('latest'),
  },
  (columns) => ({
    _services_v_parent_idx: index('_services_v_parent_idx').on(columns.parent),
    _services_v_version_version_featured_image_idx: index(
      '_services_v_version_version_featured_image_idx',
    ).on(columns.version_featuredImage),
    _services_v_version_version_slug_idx: index('_services_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _services_v_version_version_updated_at_idx: index(
      '_services_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _services_v_version_version_created_at_idx: index(
      '_services_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _services_v_version_version__status_idx: index('_services_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _services_v_created_at_idx: index('_services_v_created_at_idx').on(columns.createdAt),
    _services_v_updated_at_idx: index('_services_v_updated_at_idx').on(columns.updatedAt),
    _services_v_snapshot_idx: index('_services_v_snapshot_idx').on(columns.snapshot),
    _services_v_published_locale_idx: index('_services_v_published_locale_idx').on(
      columns.publishedLocale,
    ),
    _services_v_latest_idx: index('_services_v_latest_idx').on(columns.latest),
  }),
)

export const _services_v_locales = pgTable(
  '_services_v_locales',
  {
    version_title: varchar('version_title'),
    version_description: varchar('version_description'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('_services_v_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_services_v.id],
      name: '_services_v_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _services_v_rels = pgTable(
  '_services_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    teamMembersID: integer('team_members_id'),
    caseStudiesID: integer('case_studies_id'),
    industriesID: integer('industries_id'),
  },
  (columns) => ({
    order: index('_services_v_rels_order_idx').on(columns.order),
    parentIdx: index('_services_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_services_v_rels_path_idx').on(columns.path),
    _services_v_rels_team_members_id_idx: index('_services_v_rels_team_members_id_idx').on(
      columns.teamMembersID,
    ),
    _services_v_rels_case_studies_id_idx: index('_services_v_rels_case_studies_id_idx').on(
      columns.caseStudiesID,
    ),
    _services_v_rels_industries_id_idx: index('_services_v_rels_industries_id_idx').on(
      columns.industriesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_services_v.id],
      name: '_services_v_rels_parent_fk',
    }).onDelete('cascade'),
    teamMembersIdFk: foreignKey({
      columns: [columns['teamMembersID']],
      foreignColumns: [team_members.id],
      name: '_services_v_rels_team_members_fk',
    }).onDelete('cascade'),
    caseStudiesIdFk: foreignKey({
      columns: [columns['caseStudiesID']],
      foreignColumns: [case_studies.id],
      name: '_services_v_rels_case_studies_fk',
    }).onDelete('cascade'),
    industriesIdFk: foreignKey({
      columns: [columns['industriesID']],
      foreignColumns: [industries.id],
      name: '_services_v_rels_industries_fk',
    }).onDelete('cascade'),
  }),
)

export const team_members = pgTable(
  'team_members',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    linkedin: varchar('linkedin'),
    email: varchar('email'),
    isHeadOfDepartment: boolean('is_head_of_department'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    team_members_image_idx: index('team_members_image_idx').on(columns.image),
    team_members_updated_at_idx: index('team_members_updated_at_idx').on(columns.updatedAt),
    team_members_created_at_idx: index('team_members_created_at_idx').on(columns.createdAt),
  }),
)

export const team_members_locales = pgTable(
  'team_members_locales',
  {
    role: varchar('role').notNull(),
    bio: varchar('bio'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('team_members_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [team_members.id],
      name: 'team_members_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const team_members_rels = pgTable(
  'team_members_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    servicesID: integer('services_id'),
  },
  (columns) => ({
    order: index('team_members_rels_order_idx').on(columns.order),
    parentIdx: index('team_members_rels_parent_idx').on(columns.parent),
    pathIdx: index('team_members_rels_path_idx').on(columns.path),
    team_members_rels_services_id_idx: index('team_members_rels_services_id_idx').on(
      columns.servicesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [team_members.id],
      name: 'team_members_rels_parent_fk',
    }).onDelete('cascade'),
    servicesIdFk: foreignKey({
      columns: [columns['servicesID']],
      foreignColumns: [services.id],
      name: 'team_members_rels_services_fk',
    }).onDelete('cascade'),
  }),
)

export const careers_key_responsibilities = pgTable(
  'careers_key_responsibilities',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    responsibility: varchar('responsibility'),
  },
  (columns) => ({
    _orderIdx: index('careers_key_responsibilities_order_idx').on(columns._order),
    _parentIDIdx: index('careers_key_responsibilities_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [careers.id],
      name: 'careers_key_responsibilities_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const careers_requirements = pgTable(
  'careers_requirements',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    requirement: varchar('requirement'),
  },
  (columns) => ({
    _orderIdx: index('careers_requirements_order_idx').on(columns._order),
    _parentIDIdx: index('careers_requirements_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [careers.id],
      name: 'careers_requirements_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const careers_preferred_qualifications = pgTable(
  'careers_preferred_qualifications',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    qualification: varchar('qualification'),
  },
  (columns) => ({
    _orderIdx: index('careers_preferred_qualifications_order_idx').on(columns._order),
    _parentIDIdx: index('careers_preferred_qualifications_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [careers.id],
      name: 'careers_preferred_qualifications_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const careers_benefits = pgTable(
  'careers_benefits',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    benefit: varchar('benefit'),
  },
  (columns) => ({
    _orderIdx: index('careers_benefits_order_idx').on(columns._order),
    _parentIDIdx: index('careers_benefits_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [careers.id],
      name: 'careers_benefits_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const careers = pgTable(
  'careers',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    category: varchar('category'),
    location: varchar('location'),
    type: enum_careers_type('type'),
    description: jsonb('description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_careers_status('_status').default('draft'),
  },
  (columns) => ({
    careers_slug_idx: index('careers_slug_idx').on(columns.slug),
    careers_updated_at_idx: index('careers_updated_at_idx').on(columns.updatedAt),
    careers_created_at_idx: index('careers_created_at_idx').on(columns.createdAt),
    careers__status_idx: index('careers__status_idx').on(columns._status),
  }),
)

export const _careers_v_version_key_responsibilities = pgTable(
  '_careers_v_version_key_responsibilities',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    responsibility: varchar('responsibility'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_careers_v_version_key_responsibilities_order_idx').on(columns._order),
    _parentIDIdx: index('_careers_v_version_key_responsibilities_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_careers_v.id],
      name: '_careers_v_version_key_responsibilities_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _careers_v_version_requirements = pgTable(
  '_careers_v_version_requirements',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    requirement: varchar('requirement'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_careers_v_version_requirements_order_idx').on(columns._order),
    _parentIDIdx: index('_careers_v_version_requirements_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_careers_v.id],
      name: '_careers_v_version_requirements_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _careers_v_version_preferred_qualifications = pgTable(
  '_careers_v_version_preferred_qualifications',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    qualification: varchar('qualification'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_careers_v_version_preferred_qualifications_order_idx').on(columns._order),
    _parentIDIdx: index('_careers_v_version_preferred_qualifications_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_careers_v.id],
      name: '_careers_v_version_preferred_qualifications_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _careers_v_version_benefits = pgTable(
  '_careers_v_version_benefits',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    benefit: varchar('benefit'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_careers_v_version_benefits_order_idx').on(columns._order),
    _parentIDIdx: index('_careers_v_version_benefits_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_careers_v.id],
      name: '_careers_v_version_benefits_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _careers_v = pgTable(
  '_careers_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => careers.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_category: varchar('version_category'),
    version_location: varchar('version_location'),
    version_type: enum__careers_v_version_type('version_type'),
    version_description: jsonb('version_description'),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__careers_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    snapshot: boolean('snapshot'),
    publishedLocale: enum__careers_v_published_locale('published_locale'),
    latest: boolean('latest'),
  },
  (columns) => ({
    _careers_v_parent_idx: index('_careers_v_parent_idx').on(columns.parent),
    _careers_v_version_version_slug_idx: index('_careers_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _careers_v_version_version_updated_at_idx: index(
      '_careers_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _careers_v_version_version_created_at_idx: index(
      '_careers_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _careers_v_version_version__status_idx: index('_careers_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _careers_v_created_at_idx: index('_careers_v_created_at_idx').on(columns.createdAt),
    _careers_v_updated_at_idx: index('_careers_v_updated_at_idx').on(columns.updatedAt),
    _careers_v_snapshot_idx: index('_careers_v_snapshot_idx').on(columns.snapshot),
    _careers_v_published_locale_idx: index('_careers_v_published_locale_idx').on(
      columns.publishedLocale,
    ),
    _careers_v_latest_idx: index('_careers_v_latest_idx').on(columns.latest),
  }),
)

export const product_documents = pgTable(
  'product_documents',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt'),
    product: integer('product_id').references(() => products.id, {
      onDelete: 'set null',
    }),
    type: enum_product_documents_type('type'),
    prefix: varchar('prefix').default('files'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    product_documents_product_idx: index('product_documents_product_idx').on(columns.product),
    product_documents_updated_at_idx: index('product_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    product_documents_created_at_idx: index('product_documents_created_at_idx').on(
      columns.createdAt,
    ),
    product_documents_filename_idx: uniqueIndex('product_documents_filename_idx').on(
      columns.filename,
    ),
  }),
)

export const redirects = pgTable(
  'redirects',
  {
    id: serial('id').primaryKey(),
    from: varchar('from').notNull(),
    to_type: enum_redirects_to_type('to_type').default('reference'),
    to_url: varchar('to_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    redirects_from_idx: uniqueIndex('redirects_from_idx').on(columns.from),
    redirects_updated_at_idx: index('redirects_updated_at_idx').on(columns.updatedAt),
    redirects_created_at_idx: index('redirects_created_at_idx').on(columns.createdAt),
  }),
)

export const redirects_rels = pgTable(
  'redirects_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('redirects_rels_order_idx').on(columns.order),
    parentIdx: index('redirects_rels_parent_idx').on(columns.parent),
    pathIdx: index('redirects_rels_path_idx').on(columns.path),
    redirects_rels_pages_id_idx: index('redirects_rels_pages_id_idx').on(columns.pagesID),
    redirects_rels_posts_id_idx: index('redirects_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [redirects.id],
      name: 'redirects_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'redirects_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'redirects_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_checkbox = pgTable(
  'forms_blocks_checkbox',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    width: numeric('width'),
    required: boolean('required'),
    defaultValue: boolean('default_value'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_checkbox_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_checkbox_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_checkbox_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_checkbox_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_checkbox_locales = pgTable(
  'forms_blocks_checkbox_locales',
  {
    label: varchar('label'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_blocks_checkbox_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_checkbox.id],
      name: 'forms_blocks_checkbox_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_country = pgTable(
  'forms_blocks_country',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_country_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_country_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_country_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_country_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_country_locales = pgTable(
  'forms_blocks_country_locales',
  {
    label: varchar('label'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_blocks_country_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_country.id],
      name: 'forms_blocks_country_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_email = pgTable(
  'forms_blocks_email',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_email_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_email_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_email_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_email_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_email_locales = pgTable(
  'forms_blocks_email_locales',
  {
    label: varchar('label'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_blocks_email_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_email.id],
      name: 'forms_blocks_email_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_message = pgTable(
  'forms_blocks_message',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_message_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_message_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_message_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_message_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_message_locales = pgTable(
  'forms_blocks_message_locales',
  {
    message: jsonb('message'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_blocks_message_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_message.id],
      name: 'forms_blocks_message_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_number = pgTable(
  'forms_blocks_number',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    width: numeric('width'),
    defaultValue: numeric('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_number_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_number_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_number_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_number_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_number_locales = pgTable(
  'forms_blocks_number_locales',
  {
    label: varchar('label'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_blocks_number_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_number.id],
      name: 'forms_blocks_number_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select_options = pgTable(
  'forms_blocks_select_options',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_options_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_options_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_select.id],
      name: 'forms_blocks_select_options_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select_options_locales = pgTable(
  'forms_blocks_select_options_locales',
  {
    label: varchar('label').notNull(),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_blocks_select_options_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_select_options.id],
      name: 'forms_blocks_select_options_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select = pgTable(
  'forms_blocks_select',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    width: numeric('width'),
    placeholder: varchar('placeholder'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_select_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_select_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select_locales = pgTable(
  'forms_blocks_select_locales',
  {
    label: varchar('label'),
    defaultValue: varchar('default_value'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_blocks_select_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_select.id],
      name: 'forms_blocks_select_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_state = pgTable(
  'forms_blocks_state',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_state_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_state_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_state_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_state_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_state_locales = pgTable(
  'forms_blocks_state_locales',
  {
    label: varchar('label'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_blocks_state_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_state.id],
      name: 'forms_blocks_state_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_text = pgTable(
  'forms_blocks_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_text_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_text_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_text_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_text_locales = pgTable(
  'forms_blocks_text_locales',
  {
    label: varchar('label'),
    defaultValue: varchar('default_value'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_blocks_text_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_text.id],
      name: 'forms_blocks_text_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_textarea = pgTable(
  'forms_blocks_textarea',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_textarea_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_textarea_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_textarea_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_textarea_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_textarea_locales = pgTable(
  'forms_blocks_textarea_locales',
  {
    label: varchar('label'),
    defaultValue: varchar('default_value'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_blocks_textarea_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_textarea.id],
      name: 'forms_blocks_textarea_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_emails = pgTable(
  'forms_emails',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    emailTo: varchar('email_to'),
    cc: varchar('cc'),
    bcc: varchar('bcc'),
    replyTo: varchar('reply_to'),
    emailFrom: varchar('email_from'),
  },
  (columns) => ({
    _orderIdx: index('forms_emails_order_idx').on(columns._order),
    _parentIDIdx: index('forms_emails_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_emails_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_emails_locales = pgTable(
  'forms_emails_locales',
  {
    subject: varchar('subject').notNull().default("You've received a new message."),
    message: jsonb('message'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_emails_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_emails.id],
      name: 'forms_emails_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms = pgTable(
  'forms',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    confirmationType: enum_forms_confirmation_type('confirmation_type').default('message'),
    redirect_url: varchar('redirect_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    forms_updated_at_idx: index('forms_updated_at_idx').on(columns.updatedAt),
    forms_created_at_idx: index('forms_created_at_idx').on(columns.createdAt),
  }),
)

export const forms_locales = pgTable(
  'forms_locales',
  {
    submitButtonLabel: varchar('submit_button_label'),
    confirmationMessage: jsonb('confirmation_message'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const form_submissions_submission_data = pgTable(
  'form_submissions_submission_data',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    field: varchar('field').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('form_submissions_submission_data_order_idx').on(columns._order),
    _parentIDIdx: index('form_submissions_submission_data_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [form_submissions.id],
      name: 'form_submissions_submission_data_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const form_submissions = pgTable(
  'form_submissions',
  {
    id: serial('id').primaryKey(),
    form: integer('form_id')
      .notNull()
      .references(() => forms.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    form_submissions_form_idx: index('form_submissions_form_idx').on(columns.form),
    form_submissions_updated_at_idx: index('form_submissions_updated_at_idx').on(columns.updatedAt),
    form_submissions_created_at_idx: index('form_submissions_created_at_idx').on(columns.createdAt),
  }),
)

export const search_categories = pgTable(
  'search_categories',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    relationTo: varchar('relation_to'),
    title: varchar('title'),
  },
  (columns) => ({
    _orderIdx: index('search_categories_order_idx').on(columns._order),
    _parentIDIdx: index('search_categories_parent_id_idx').on(columns._parentID),
    _localeIdx: index('search_categories_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [search.id],
      name: 'search_categories_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const search = pgTable(
  'search',
  {
    id: serial('id').primaryKey(),
    priority: numeric('priority'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    search_updated_at_idx: index('search_updated_at_idx').on(columns.updatedAt),
    search_created_at_idx: index('search_created_at_idx').on(columns.createdAt),
  }),
)

export const search_locales = pgTable(
  'search_locales',
  {
    title: varchar('title'),
    slug: varchar('slug'),
    description: varchar('description'),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    search_slug_idx: index('search_slug_idx').on(columns.slug, columns._locale),
    search_description_idx: index('search_description_idx').on(
      columns.description,
      columns._locale,
    ),
    search_meta_meta_image_idx: index('search_meta_meta_image_idx').on(columns.meta_image),
    _localeParent: uniqueIndex('search_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [search.id],
      name: 'search_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const search_rels = pgTable(
  'search_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
    productsID: integer('products_id'),
    productCategoriesID: integer('product_categories_id'),
    industriesID: integer('industries_id'),
    servicesID: integer('services_id'),
    careersID: integer('careers_id'),
  },
  (columns) => ({
    order: index('search_rels_order_idx').on(columns.order),
    parentIdx: index('search_rels_parent_idx').on(columns.parent),
    pathIdx: index('search_rels_path_idx').on(columns.path),
    search_rels_posts_id_idx: index('search_rels_posts_id_idx').on(columns.postsID),
    search_rels_products_id_idx: index('search_rels_products_id_idx').on(columns.productsID),
    search_rels_product_categories_id_idx: index('search_rels_product_categories_id_idx').on(
      columns.productCategoriesID,
    ),
    search_rels_industries_id_idx: index('search_rels_industries_id_idx').on(columns.industriesID),
    search_rels_services_id_idx: index('search_rels_services_id_idx').on(columns.servicesID),
    search_rels_careers_id_idx: index('search_rels_careers_id_idx').on(columns.careersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [search.id],
      name: 'search_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'search_rels_posts_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'search_rels_products_fk',
    }).onDelete('cascade'),
    productCategoriesIdFk: foreignKey({
      columns: [columns['productCategoriesID']],
      foreignColumns: [product_categories.id],
      name: 'search_rels_product_categories_fk',
    }).onDelete('cascade'),
    industriesIdFk: foreignKey({
      columns: [columns['industriesID']],
      foreignColumns: [industries.id],
      name: 'search_rels_industries_fk',
    }).onDelete('cascade'),
    servicesIdFk: foreignKey({
      columns: [columns['servicesID']],
      foreignColumns: [services.id],
      name: 'search_rels_services_fk',
    }).onDelete('cascade'),
    careersIdFk: foreignKey({
      columns: [columns['careersID']],
      foreignColumns: [careers.id],
      name: 'search_rels_careers_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_jobs_log = pgTable(
  'payload_jobs_log',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    executedAt: timestamp('executed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    completedAt: timestamp('completed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    taskSlug: enum_payload_jobs_log_task_slug('task_slug').notNull(),
    taskID: varchar('task_i_d').notNull(),
    input: jsonb('input'),
    output: jsonb('output'),
    state: enum_payload_jobs_log_state('state').notNull(),
    error: jsonb('error'),
  },
  (columns) => ({
    _orderIdx: index('payload_jobs_log_order_idx').on(columns._order),
    _parentIDIdx: index('payload_jobs_log_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_jobs_log_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_jobs = pgTable(
  'payload_jobs',
  {
    id: serial('id').primaryKey(),
    input: jsonb('input'),
    completedAt: timestamp('completed_at', { mode: 'string', withTimezone: true, precision: 3 }),
    totalTried: numeric('total_tried').default('0'),
    hasError: boolean('has_error').default(false),
    error: jsonb('error'),
    taskSlug: enum_payload_jobs_task_slug('task_slug'),
    queue: varchar('queue').default('default'),
    waitUntil: timestamp('wait_until', { mode: 'string', withTimezone: true, precision: 3 }),
    processing: boolean('processing').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_jobs_completed_at_idx: index('payload_jobs_completed_at_idx').on(columns.completedAt),
    payload_jobs_total_tried_idx: index('payload_jobs_total_tried_idx').on(columns.totalTried),
    payload_jobs_has_error_idx: index('payload_jobs_has_error_idx').on(columns.hasError),
    payload_jobs_task_slug_idx: index('payload_jobs_task_slug_idx').on(columns.taskSlug),
    payload_jobs_queue_idx: index('payload_jobs_queue_idx').on(columns.queue),
    payload_jobs_wait_until_idx: index('payload_jobs_wait_until_idx').on(columns.waitUntil),
    payload_jobs_processing_idx: index('payload_jobs_processing_idx').on(columns.processing),
    payload_jobs_updated_at_idx: index('payload_jobs_updated_at_idx').on(columns.updatedAt),
    payload_jobs_created_at_idx: index('payload_jobs_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    mediaID: integer('media_id'),
    productCategoriesID: integer('product_categories_id'),
    usersID: integer('users_id'),
    productsID: integer('products_id'),
    industriesID: integer('industries_id'),
    caseStudiesID: integer('case_studies_id'),
    servicesID: integer('services_id'),
    teamMembersID: integer('team_members_id'),
    careersID: integer('careers_id'),
    'product-documentsID': integer('product_documents_id'),
    redirectsID: integer('redirects_id'),
    formsID: integer('forms_id'),
    'form-submissionsID': integer('form_submissions_id'),
    searchID: integer('search_id'),
    'payload-jobsID': integer('payload_jobs_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_pages_id_idx: index(
      'payload_locked_documents_rels_pages_id_idx',
    ).on(columns.pagesID),
    payload_locked_documents_rels_posts_id_idx: index(
      'payload_locked_documents_rels_posts_id_idx',
    ).on(columns.postsID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_product_categories_id_idx: index(
      'payload_locked_documents_rels_product_categories_id_idx',
    ).on(columns.productCategoriesID),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_products_id_idx: index(
      'payload_locked_documents_rels_products_id_idx',
    ).on(columns.productsID),
    payload_locked_documents_rels_industries_id_idx: index(
      'payload_locked_documents_rels_industries_id_idx',
    ).on(columns.industriesID),
    payload_locked_documents_rels_case_studies_id_idx: index(
      'payload_locked_documents_rels_case_studies_id_idx',
    ).on(columns.caseStudiesID),
    payload_locked_documents_rels_services_id_idx: index(
      'payload_locked_documents_rels_services_id_idx',
    ).on(columns.servicesID),
    payload_locked_documents_rels_team_members_id_idx: index(
      'payload_locked_documents_rels_team_members_id_idx',
    ).on(columns.teamMembersID),
    payload_locked_documents_rels_careers_id_idx: index(
      'payload_locked_documents_rels_careers_id_idx',
    ).on(columns.careersID),
    payload_locked_documents_rels_product_documents_id_idx: index(
      'payload_locked_documents_rels_product_documents_id_idx',
    ).on(columns['product-documentsID']),
    payload_locked_documents_rels_redirects_id_idx: index(
      'payload_locked_documents_rels_redirects_id_idx',
    ).on(columns.redirectsID),
    payload_locked_documents_rels_forms_id_idx: index(
      'payload_locked_documents_rels_forms_id_idx',
    ).on(columns.formsID),
    payload_locked_documents_rels_form_submissions_id_idx: index(
      'payload_locked_documents_rels_form_submissions_id_idx',
    ).on(columns['form-submissionsID']),
    payload_locked_documents_rels_search_id_idx: index(
      'payload_locked_documents_rels_search_id_idx',
    ).on(columns.searchID),
    payload_locked_documents_rels_payload_jobs_id_idx: index(
      'payload_locked_documents_rels_payload_jobs_id_idx',
    ).on(columns['payload-jobsID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'payload_locked_documents_rels_posts_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    productCategoriesIdFk: foreignKey({
      columns: [columns['productCategoriesID']],
      foreignColumns: [product_categories.id],
      name: 'payload_locked_documents_rels_product_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'payload_locked_documents_rels_products_fk',
    }).onDelete('cascade'),
    industriesIdFk: foreignKey({
      columns: [columns['industriesID']],
      foreignColumns: [industries.id],
      name: 'payload_locked_documents_rels_industries_fk',
    }).onDelete('cascade'),
    caseStudiesIdFk: foreignKey({
      columns: [columns['caseStudiesID']],
      foreignColumns: [case_studies.id],
      name: 'payload_locked_documents_rels_case_studies_fk',
    }).onDelete('cascade'),
    servicesIdFk: foreignKey({
      columns: [columns['servicesID']],
      foreignColumns: [services.id],
      name: 'payload_locked_documents_rels_services_fk',
    }).onDelete('cascade'),
    teamMembersIdFk: foreignKey({
      columns: [columns['teamMembersID']],
      foreignColumns: [team_members.id],
      name: 'payload_locked_documents_rels_team_members_fk',
    }).onDelete('cascade'),
    careersIdFk: foreignKey({
      columns: [columns['careersID']],
      foreignColumns: [careers.id],
      name: 'payload_locked_documents_rels_careers_fk',
    }).onDelete('cascade'),
    'product-documentsIdFk': foreignKey({
      columns: [columns['product-documentsID']],
      foreignColumns: [product_documents.id],
      name: 'payload_locked_documents_rels_product_documents_fk',
    }).onDelete('cascade'),
    redirectsIdFk: foreignKey({
      columns: [columns['redirectsID']],
      foreignColumns: [redirects.id],
      name: 'payload_locked_documents_rels_redirects_fk',
    }).onDelete('cascade'),
    formsIdFk: foreignKey({
      columns: [columns['formsID']],
      foreignColumns: [forms.id],
      name: 'payload_locked_documents_rels_forms_fk',
    }).onDelete('cascade'),
    'form-submissionsIdFk': foreignKey({
      columns: [columns['form-submissionsID']],
      foreignColumns: [form_submissions.id],
      name: 'payload_locked_documents_rels_form_submissions_fk',
    }).onDelete('cascade'),
    searchIdFk: foreignKey({
      columns: [columns['searchID']],
      foreignColumns: [search.id],
      name: 'payload_locked_documents_rels_search_fk',
    }).onDelete('cascade'),
    'payload-jobsIdFk': foreignKey({
      columns: [columns['payload-jobsID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_locked_documents_rels_payload_jobs_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const header_nav_items = pgTable(
  'header_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_header_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('header_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('header_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header.id],
      name: 'header_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header = pgTable('header', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const header_rels = pgTable(
  'header_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('header_rels_order_idx').on(columns.order),
    parentIdx: index('header_rels_parent_idx').on(columns.parent),
    pathIdx: index('header_rels_path_idx').on(columns.path),
    header_rels_pages_id_idx: index('header_rels_pages_id_idx').on(columns.pagesID),
    header_rels_posts_id_idx: index('header_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [header.id],
      name: 'header_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'header_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'header_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const footer_nav_items = pgTable(
  'footer_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_footer_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('footer_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('footer_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer.id],
      name: 'footer_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const footer = pgTable('footer', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const footer_rels = pgTable(
  'footer_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('footer_rels_order_idx').on(columns.order),
    parentIdx: index('footer_rels_parent_idx').on(columns.parent),
    pathIdx: index('footer_rels_path_idx').on(columns.path),
    footer_rels_pages_id_idx: index('footer_rels_pages_id_idx').on(columns.pagesID),
    footer_rels_posts_id_idx: index('footer_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [footer.id],
      name: 'footer_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'footer_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'footer_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const relations_pages_hero_cta_links = relations(pages_hero_cta_links, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_hero_cta_links._parentID],
    references: [pages.id],
    relationName: 'hero_cta_links',
  }),
}))
export const relations_sl_featured_item_links = relations(sl_featured_item_links, ({ one }) => ({
  _parentID: one(sl, {
    fields: [sl_featured_item_links._parentID],
    references: [sl.id],
    relationName: 'featuredItem_links',
  }),
}))
export const relations_sl_featured_cards_links = relations(sl_featured_cards_links, ({ one }) => ({
  _parentID: one(sl_featured_cards, {
    fields: [sl_featured_cards_links._parentID],
    references: [sl_featured_cards.id],
    relationName: 'links',
  }),
}))
export const relations_sl_featured_cards = relations(sl_featured_cards, ({ one, many }) => ({
  _parentID: one(sl, {
    fields: [sl_featured_cards._parentID],
    references: [sl.id],
    relationName: 'featuredCards',
  }),
  image: one(media, {
    fields: [sl_featured_cards.image],
    references: [media.id],
    relationName: 'image',
  }),
  links: many(sl_featured_cards_links, {
    relationName: 'links',
  }),
}))
export const relations_sl_cta_links = relations(sl_cta_links, ({ one }) => ({
  _parentID: one(sl, {
    fields: [sl_cta_links._parentID],
    references: [sl.id],
    relationName: 'cta_links',
  }),
}))
export const relations_sl = relations(sl, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [sl._parentID],
    references: [pages.id],
    relationName: 'hero_slides',
  }),
  backgroundImage: one(media, {
    fields: [sl.backgroundImage],
    references: [media.id],
    relationName: 'backgroundImage',
  }),
  featuredItem_image: one(media, {
    fields: [sl.featuredItem_image],
    references: [media.id],
    relationName: 'featuredItem_image',
  }),
  featuredItem_links: many(sl_featured_item_links, {
    relationName: 'featuredItem_links',
  }),
  featuredCards: many(sl_featured_cards, {
    relationName: 'featuredCards',
  }),
  cta_links: many(sl_cta_links, {
    relationName: 'cta_links',
  }),
}))
export const relations_pages_blocks_cta_links = relations(pages_blocks_cta_links, ({ one }) => ({
  _parentID: one(pages_blocks_cta, {
    fields: [pages_blocks_cta_links._parentID],
    references: [pages_blocks_cta.id],
    relationName: 'links',
  }),
}))
export const relations_pages_blocks_cta = relations(pages_blocks_cta, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_cta._parentID],
    references: [pages.id],
    relationName: '_blocks_cta',
  }),
  links: many(pages_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations_pages_blocks_content_columns = relations(
  pages_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(pages_blocks_content, {
      fields: [pages_blocks_content_columns._parentID],
      references: [pages_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations_pages_blocks_content = relations(pages_blocks_content, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_content._parentID],
    references: [pages.id],
    relationName: '_blocks_content',
  }),
  columns: many(pages_blocks_content_columns, {
    relationName: 'columns',
  }),
}))
export const relations_pages_blocks_media_block = relations(
  pages_blocks_media_block,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_media_block._parentID],
      references: [pages.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [pages_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_pages_blocks_form_block = relations(pages_blocks_form_block, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_form_block._parentID],
    references: [pages.id],
    relationName: '_blocks_formBlock',
  }),
  form: one(forms, {
    fields: [pages_blocks_form_block.form],
    references: [forms.id],
    relationName: 'form',
  }),
}))
export const relations_pages_blocks_quick_access_cards_links = relations(
  pages_blocks_quick_access_cards_links,
  ({ one }) => ({
    _parentID: one(pages_blocks_quick_access_cards, {
      fields: [pages_blocks_quick_access_cards_links._parentID],
      references: [pages_blocks_quick_access_cards.id],
      relationName: 'links',
    }),
  }),
)
export const relations_pages_blocks_quick_access_cards = relations(
  pages_blocks_quick_access_cards,
  ({ one, many }) => ({
    _parentID: one(pages_blocks_quick_access, {
      fields: [pages_blocks_quick_access_cards._parentID],
      references: [pages_blocks_quick_access.id],
      relationName: 'cards',
    }),
    backgroundImage: one(media, {
      fields: [pages_blocks_quick_access_cards.backgroundImage],
      references: [media.id],
      relationName: 'backgroundImage',
    }),
    links: many(pages_blocks_quick_access_cards_links, {
      relationName: 'links',
    }),
  }),
)
export const relations_pages_blocks_quick_access = relations(
  pages_blocks_quick_access,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_quick_access._parentID],
      references: [pages.id],
      relationName: '_blocks_quickAccess',
    }),
    cards: many(pages_blocks_quick_access_cards, {
      relationName: 'cards',
    }),
  }),
)
export const relations_pages_blocks_product_showcase_products = relations(
  pages_blocks_product_showcase_products,
  ({ one }) => ({
    _parentID: one(pages_blocks_product_showcase, {
      fields: [pages_blocks_product_showcase_products._parentID],
      references: [pages_blocks_product_showcase.id],
      relationName: 'products',
    }),
  }),
)
export const relations_pages_blocks_product_showcase_cta_links = relations(
  pages_blocks_product_showcase_cta_links,
  ({ one }) => ({
    _parentID: one(pages_blocks_product_showcase, {
      fields: [pages_blocks_product_showcase_cta_links._parentID],
      references: [pages_blocks_product_showcase.id],
      relationName: 'cta_links',
    }),
  }),
)
export const relations_pages_blocks_product_showcase = relations(
  pages_blocks_product_showcase,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_product_showcase._parentID],
      references: [pages.id],
      relationName: '_blocks_productShowcase',
    }),
    products: many(pages_blocks_product_showcase_products, {
      relationName: 'products',
    }),
    cta_links: many(pages_blocks_product_showcase_cta_links, {
      relationName: 'cta_links',
    }),
  }),
)
export const relations_pages_blocks_career_features = relations(
  pages_blocks_career_features,
  ({ one }) => ({
    _parentID: one(pages_blocks_career, {
      fields: [pages_blocks_career_features._parentID],
      references: [pages_blocks_career.id],
      relationName: 'features',
    }),
  }),
)
export const relations_pages_blocks_career_cta_links = relations(
  pages_blocks_career_cta_links,
  ({ one }) => ({
    _parentID: one(pages_blocks_career, {
      fields: [pages_blocks_career_cta_links._parentID],
      references: [pages_blocks_career.id],
      relationName: 'cta_links',
    }),
  }),
)
export const relations_pages_blocks_career = relations(pages_blocks_career, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_career._parentID],
    references: [pages.id],
    relationName: '_blocks_career',
  }),
  features: many(pages_blocks_career_features, {
    relationName: 'features',
  }),
  cta_links: many(pages_blocks_career_cta_links, {
    relationName: 'cta_links',
  }),
}))
export const relations_pages_blocks_sustainability_features = relations(
  pages_blocks_sustainability_features,
  ({ one }) => ({
    _parentID: one(pages_blocks_sustainability, {
      fields: [pages_blocks_sustainability_features._parentID],
      references: [pages_blocks_sustainability.id],
      relationName: 'features',
    }),
  }),
)
export const relations_pages_blocks_sustainability_cta_links = relations(
  pages_blocks_sustainability_cta_links,
  ({ one }) => ({
    _parentID: one(pages_blocks_sustainability, {
      fields: [pages_blocks_sustainability_cta_links._parentID],
      references: [pages_blocks_sustainability.id],
      relationName: 'cta_links',
    }),
  }),
)
export const relations_pages_blocks_sustainability = relations(
  pages_blocks_sustainability,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_sustainability._parentID],
      references: [pages.id],
      relationName: '_blocks_sustainability',
    }),
    image: one(media, {
      fields: [pages_blocks_sustainability.image],
      references: [media.id],
      relationName: 'image',
    }),
    features: many(pages_blocks_sustainability_features, {
      relationName: 'features',
    }),
    cta_links: many(pages_blocks_sustainability_cta_links, {
      relationName: 'cta_links',
    }),
  }),
)
export const relations_pages_blocks_content_image = relations(
  pages_blocks_content_image,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_content_image._parentID],
      references: [pages.id],
      relationName: '_blocks_contentImage',
    }),
    image: one(media, {
      fields: [pages_blocks_content_image.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations_pages_blocks_industry_showcase = relations(
  pages_blocks_industry_showcase,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_industry_showcase._parentID],
      references: [pages.id],
      relationName: '_blocks_industryShowcase',
    }),
  }),
)
export const relations_pages_blocks_showcase_content_items = relations(
  pages_blocks_showcase_content_items,
  ({ one }) => ({
    _parentID: one(pages_blocks_showcase, {
      fields: [pages_blocks_showcase_content_items._parentID],
      references: [pages_blocks_showcase.id],
      relationName: 'contentItems',
    }),
  }),
)
export const relations_pages_blocks_showcase_features = relations(
  pages_blocks_showcase_features,
  ({ one }) => ({
    _parentID: one(pages_blocks_showcase, {
      fields: [pages_blocks_showcase_features._parentID],
      references: [pages_blocks_showcase.id],
      relationName: 'features',
    }),
    media: one(media, {
      fields: [pages_blocks_showcase_features.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_pages_blocks_showcase_cta_links = relations(
  pages_blocks_showcase_cta_links,
  ({ one }) => ({
    _parentID: one(pages_blocks_showcase, {
      fields: [pages_blocks_showcase_cta_links._parentID],
      references: [pages_blocks_showcase.id],
      relationName: 'cta_links',
    }),
  }),
)
export const relations_pages_blocks_showcase = relations(
  pages_blocks_showcase,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_showcase._parentID],
      references: [pages.id],
      relationName: '_blocks_showcase',
    }),
    contentItems: many(pages_blocks_showcase_content_items, {
      relationName: 'contentItems',
    }),
    features: many(pages_blocks_showcase_features, {
      relationName: 'features',
    }),
    cta_links: many(pages_blocks_showcase_cta_links, {
      relationName: 'cta_links',
    }),
  }),
)
export const relations_pages_blocks_news = relations(pages_blocks_news, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_news._parentID],
    references: [pages.id],
    relationName: '_blocks_news',
  }),
}))
export const relations_pages_blocks_product_filter_enabled_filters = relations(
  pages_blocks_product_filter_enabled_filters,
  ({ one }) => ({
    parent: one(pages_blocks_product_filter, {
      fields: [pages_blocks_product_filter_enabled_filters.parent],
      references: [pages_blocks_product_filter.id],
      relationName: 'enabledFilters',
    }),
  }),
)
export const relations_pages_blocks_product_filter_cta_links = relations(
  pages_blocks_product_filter_cta_links,
  ({ one }) => ({
    _parentID: one(pages_blocks_product_filter, {
      fields: [pages_blocks_product_filter_cta_links._parentID],
      references: [pages_blocks_product_filter.id],
      relationName: 'cta_links',
    }),
  }),
)
export const relations_pages_blocks_product_filter = relations(
  pages_blocks_product_filter,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_product_filter._parentID],
      references: [pages.id],
      relationName: '_blocks_productFilter',
    }),
    enabledFilters: many(pages_blocks_product_filter_enabled_filters, {
      relationName: 'enabledFilters',
    }),
    cta_links: many(pages_blocks_product_filter_cta_links, {
      relationName: 'cta_links',
    }),
  }),
)
export const relations_pages_blocks_vertical_cards_cards = relations(
  pages_blocks_vertical_cards_cards,
  ({ one }) => ({
    _parentID: one(pages_blocks_vertical_cards, {
      fields: [pages_blocks_vertical_cards_cards._parentID],
      references: [pages_blocks_vertical_cards.id],
      relationName: 'cards',
    }),
    image: one(media, {
      fields: [pages_blocks_vertical_cards_cards.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations_pages_blocks_vertical_cards = relations(
  pages_blocks_vertical_cards,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_vertical_cards._parentID],
      references: [pages.id],
      relationName: '_blocks_verticalCards',
    }),
    cards: many(pages_blocks_vertical_cards_cards, {
      relationName: 'cards',
    }),
  }),
)
export const relations_pages_blocks_grid_image_cards_cards_highlights = relations(
  pages_blocks_grid_image_cards_cards_highlights,
  ({ one }) => ({
    _parentID: one(pages_blocks_grid_image_cards_cards, {
      fields: [pages_blocks_grid_image_cards_cards_highlights._parentID],
      references: [pages_blocks_grid_image_cards_cards.id],
      relationName: 'highlights',
    }),
  }),
)
export const relations_pages_blocks_grid_image_cards_cards = relations(
  pages_blocks_grid_image_cards_cards,
  ({ one, many }) => ({
    _parentID: one(pages_blocks_grid_image_cards, {
      fields: [pages_blocks_grid_image_cards_cards._parentID],
      references: [pages_blocks_grid_image_cards.id],
      relationName: 'cards',
    }),
    image: one(media, {
      fields: [pages_blocks_grid_image_cards_cards.image],
      references: [media.id],
      relationName: 'image',
    }),
    highlights: many(pages_blocks_grid_image_cards_cards_highlights, {
      relationName: 'highlights',
    }),
  }),
)
export const relations_pages_blocks_grid_image_cards = relations(
  pages_blocks_grid_image_cards,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_grid_image_cards._parentID],
      references: [pages.id],
      relationName: '_blocks_gridImageCards',
    }),
    cards: many(pages_blocks_grid_image_cards_cards, {
      relationName: 'cards',
    }),
  }),
)
export const relations_pages_blocks_careers = relations(pages_blocks_careers, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_careers._parentID],
    references: [pages.id],
    relationName: '_blocks_careers',
  }),
}))
export const relations_pages_blocks_certifications_certifications = relations(
  pages_blocks_certifications_certifications,
  ({ one }) => ({
    _parentID: one(pages_blocks_certifications, {
      fields: [pages_blocks_certifications_certifications._parentID],
      references: [pages_blocks_certifications.id],
      relationName: 'certifications',
    }),
    image: one(media, {
      fields: [pages_blocks_certifications_certifications.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations_pages_blocks_certifications = relations(
  pages_blocks_certifications,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_certifications._parentID],
      references: [pages.id],
      relationName: '_blocks_certifications',
    }),
    featuredCertification_image: one(media, {
      fields: [pages_blocks_certifications.featuredCertification_image],
      references: [media.id],
      relationName: 'featuredCertification_image',
    }),
    certifications: many(pages_blocks_certifications_certifications, {
      relationName: 'certifications',
    }),
  }),
)
export const relations_pages_blocks_timeline_items_key_achievements = relations(
  pages_blocks_timeline_items_key_achievements,
  ({ one }) => ({
    _parentID: one(pages_blocks_timeline_items, {
      fields: [pages_blocks_timeline_items_key_achievements._parentID],
      references: [pages_blocks_timeline_items.id],
      relationName: 'keyAchievements',
    }),
  }),
)
export const relations_pages_blocks_timeline_items = relations(
  pages_blocks_timeline_items,
  ({ one, many }) => ({
    _parentID: one(pages_blocks_timeline, {
      fields: [pages_blocks_timeline_items._parentID],
      references: [pages_blocks_timeline.id],
      relationName: 'items',
    }),
    keyAchievements: many(pages_blocks_timeline_items_key_achievements, {
      relationName: 'keyAchievements',
    }),
    imageUrl: one(media, {
      fields: [pages_blocks_timeline_items.imageUrl],
      references: [media.id],
      relationName: 'imageUrl',
    }),
  }),
)
export const relations_pages_blocks_timeline = relations(
  pages_blocks_timeline,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_timeline._parentID],
      references: [pages.id],
      relationName: '_blocks_timeline',
    }),
    items: many(pages_blocks_timeline_items, {
      relationName: 'items',
    }),
  }),
)
export const relations_pages_blocks_team = relations(pages_blocks_team, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_team._parentID],
    references: [pages.id],
    relationName: '_blocks_team',
  }),
}))
export const relations_pages_locales = relations(pages_locales, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_locales._parentID],
    references: [pages.id],
    relationName: '_locales',
  }),
  hero_media: one(media, {
    fields: [pages_locales.hero_media],
    references: [media.id],
    relationName: 'hero_media',
  }),
  meta_image: one(media, {
    fields: [pages_locales.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
}))
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
  parent: one(pages, {
    fields: [pages_rels.parent],
    references: [pages.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [pages_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [pages_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  productsID: one(products, {
    fields: [pages_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  industriesID: one(industries, {
    fields: [pages_rels.industriesID],
    references: [industries.id],
    relationName: 'industries',
  }),
  productCategoriesID: one(product_categories, {
    fields: [pages_rels.productCategoriesID],
    references: [product_categories.id],
    relationName: 'productCategories',
  }),
  careersID: one(careers, {
    fields: [pages_rels.careersID],
    references: [careers.id],
    relationName: 'careers',
  }),
  teamMembersID: one(team_members, {
    fields: [pages_rels.teamMembersID],
    references: [team_members.id],
    relationName: 'teamMembers',
  }),
}))
export const relations_pages = relations(pages, ({ many }) => ({
  hero_cta_links: many(pages_hero_cta_links, {
    relationName: 'hero_cta_links',
  }),
  hero_slides: many(sl, {
    relationName: 'hero_slides',
  }),
  _blocks_cta: many(pages_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(pages_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(pages_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_formBlock: many(pages_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  _blocks_quickAccess: many(pages_blocks_quick_access, {
    relationName: '_blocks_quickAccess',
  }),
  _blocks_productShowcase: many(pages_blocks_product_showcase, {
    relationName: '_blocks_productShowcase',
  }),
  _blocks_career: many(pages_blocks_career, {
    relationName: '_blocks_career',
  }),
  _blocks_sustainability: many(pages_blocks_sustainability, {
    relationName: '_blocks_sustainability',
  }),
  _blocks_contentImage: many(pages_blocks_content_image, {
    relationName: '_blocks_contentImage',
  }),
  _blocks_industryShowcase: many(pages_blocks_industry_showcase, {
    relationName: '_blocks_industryShowcase',
  }),
  _blocks_showcase: many(pages_blocks_showcase, {
    relationName: '_blocks_showcase',
  }),
  _blocks_news: many(pages_blocks_news, {
    relationName: '_blocks_news',
  }),
  _blocks_productFilter: many(pages_blocks_product_filter, {
    relationName: '_blocks_productFilter',
  }),
  _blocks_verticalCards: many(pages_blocks_vertical_cards, {
    relationName: '_blocks_verticalCards',
  }),
  _blocks_gridImageCards: many(pages_blocks_grid_image_cards, {
    relationName: '_blocks_gridImageCards',
  }),
  _blocks_careers: many(pages_blocks_careers, {
    relationName: '_blocks_careers',
  }),
  _blocks_certifications: many(pages_blocks_certifications, {
    relationName: '_blocks_certifications',
  }),
  _blocks_timeline: many(pages_blocks_timeline, {
    relationName: '_blocks_timeline',
  }),
  _blocks_team: many(pages_blocks_team, {
    relationName: '_blocks_team',
  }),
  _locales: many(pages_locales, {
    relationName: '_locales',
  }),
  _rels: many(pages_rels, {
    relationName: '_rels',
  }),
}))
export const relations__pages_v_version_hero_cta_links = relations(
  _pages_v_version_hero_cta_links,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_version_hero_cta_links._parentID],
      references: [_pages_v.id],
      relationName: 'version_hero_cta_links',
    }),
  }),
)
export const relations__sl_v_featured_item_links = relations(
  _sl_v_featured_item_links,
  ({ one }) => ({
    _parentID: one(_sl_v, {
      fields: [_sl_v_featured_item_links._parentID],
      references: [_sl_v.id],
      relationName: 'featuredItem_links',
    }),
  }),
)
export const relations__sl_v_featured_cards_links = relations(
  _sl_v_featured_cards_links,
  ({ one }) => ({
    _parentID: one(_sl_v_featured_cards, {
      fields: [_sl_v_featured_cards_links._parentID],
      references: [_sl_v_featured_cards.id],
      relationName: 'links',
    }),
  }),
)
export const relations__sl_v_featured_cards = relations(_sl_v_featured_cards, ({ one, many }) => ({
  _parentID: one(_sl_v, {
    fields: [_sl_v_featured_cards._parentID],
    references: [_sl_v.id],
    relationName: 'featuredCards',
  }),
  image: one(media, {
    fields: [_sl_v_featured_cards.image],
    references: [media.id],
    relationName: 'image',
  }),
  links: many(_sl_v_featured_cards_links, {
    relationName: 'links',
  }),
}))
export const relations__sl_v_cta_links = relations(_sl_v_cta_links, ({ one }) => ({
  _parentID: one(_sl_v, {
    fields: [_sl_v_cta_links._parentID],
    references: [_sl_v.id],
    relationName: 'cta_links',
  }),
}))
export const relations__sl_v = relations(_sl_v, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_sl_v._parentID],
    references: [_pages_v.id],
    relationName: 'version_hero_slides',
  }),
  backgroundImage: one(media, {
    fields: [_sl_v.backgroundImage],
    references: [media.id],
    relationName: 'backgroundImage',
  }),
  featuredItem_image: one(media, {
    fields: [_sl_v.featuredItem_image],
    references: [media.id],
    relationName: 'featuredItem_image',
  }),
  featuredItem_links: many(_sl_v_featured_item_links, {
    relationName: 'featuredItem_links',
  }),
  featuredCards: many(_sl_v_featured_cards, {
    relationName: 'featuredCards',
  }),
  cta_links: many(_sl_v_cta_links, {
    relationName: 'cta_links',
  }),
}))
export const relations__pages_v_blocks_cta_links = relations(
  _pages_v_blocks_cta_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_cta, {
      fields: [_pages_v_blocks_cta_links._parentID],
      references: [_pages_v_blocks_cta.id],
      relationName: 'links',
    }),
  }),
)
export const relations__pages_v_blocks_cta = relations(_pages_v_blocks_cta, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_cta._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_cta',
  }),
  links: many(_pages_v_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations__pages_v_blocks_content_columns = relations(
  _pages_v_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_content, {
      fields: [_pages_v_blocks_content_columns._parentID],
      references: [_pages_v_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_content = relations(
  _pages_v_blocks_content,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_content._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_content',
    }),
    columns: many(_pages_v_blocks_content_columns, {
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_media_block = relations(
  _pages_v_blocks_media_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_media_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [_pages_v_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations__pages_v_blocks_form_block = relations(
  _pages_v_blocks_form_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_form_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_formBlock',
    }),
    form: one(forms, {
      fields: [_pages_v_blocks_form_block.form],
      references: [forms.id],
      relationName: 'form',
    }),
  }),
)
export const relations__pages_v_blocks_quick_access_cards_links = relations(
  _pages_v_blocks_quick_access_cards_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_quick_access_cards, {
      fields: [_pages_v_blocks_quick_access_cards_links._parentID],
      references: [_pages_v_blocks_quick_access_cards.id],
      relationName: 'links',
    }),
  }),
)
export const relations__pages_v_blocks_quick_access_cards = relations(
  _pages_v_blocks_quick_access_cards,
  ({ one, many }) => ({
    _parentID: one(_pages_v_blocks_quick_access, {
      fields: [_pages_v_blocks_quick_access_cards._parentID],
      references: [_pages_v_blocks_quick_access.id],
      relationName: 'cards',
    }),
    backgroundImage: one(media, {
      fields: [_pages_v_blocks_quick_access_cards.backgroundImage],
      references: [media.id],
      relationName: 'backgroundImage',
    }),
    links: many(_pages_v_blocks_quick_access_cards_links, {
      relationName: 'links',
    }),
  }),
)
export const relations__pages_v_blocks_quick_access = relations(
  _pages_v_blocks_quick_access,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_quick_access._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_quickAccess',
    }),
    cards: many(_pages_v_blocks_quick_access_cards, {
      relationName: 'cards',
    }),
  }),
)
export const relations__pages_v_blocks_product_showcase_products = relations(
  _pages_v_blocks_product_showcase_products,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_product_showcase, {
      fields: [_pages_v_blocks_product_showcase_products._parentID],
      references: [_pages_v_blocks_product_showcase.id],
      relationName: 'products',
    }),
  }),
)
export const relations__pages_v_blocks_product_showcase_cta_links = relations(
  _pages_v_blocks_product_showcase_cta_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_product_showcase, {
      fields: [_pages_v_blocks_product_showcase_cta_links._parentID],
      references: [_pages_v_blocks_product_showcase.id],
      relationName: 'cta_links',
    }),
  }),
)
export const relations__pages_v_blocks_product_showcase = relations(
  _pages_v_blocks_product_showcase,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_product_showcase._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_productShowcase',
    }),
    products: many(_pages_v_blocks_product_showcase_products, {
      relationName: 'products',
    }),
    cta_links: many(_pages_v_blocks_product_showcase_cta_links, {
      relationName: 'cta_links',
    }),
  }),
)
export const relations__pages_v_blocks_career_features = relations(
  _pages_v_blocks_career_features,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_career, {
      fields: [_pages_v_blocks_career_features._parentID],
      references: [_pages_v_blocks_career.id],
      relationName: 'features',
    }),
  }),
)
export const relations__pages_v_blocks_career_cta_links = relations(
  _pages_v_blocks_career_cta_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_career, {
      fields: [_pages_v_blocks_career_cta_links._parentID],
      references: [_pages_v_blocks_career.id],
      relationName: 'cta_links',
    }),
  }),
)
export const relations__pages_v_blocks_career = relations(
  _pages_v_blocks_career,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_career._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_career',
    }),
    features: many(_pages_v_blocks_career_features, {
      relationName: 'features',
    }),
    cta_links: many(_pages_v_blocks_career_cta_links, {
      relationName: 'cta_links',
    }),
  }),
)
export const relations__pages_v_blocks_sustainability_features = relations(
  _pages_v_blocks_sustainability_features,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_sustainability, {
      fields: [_pages_v_blocks_sustainability_features._parentID],
      references: [_pages_v_blocks_sustainability.id],
      relationName: 'features',
    }),
  }),
)
export const relations__pages_v_blocks_sustainability_cta_links = relations(
  _pages_v_blocks_sustainability_cta_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_sustainability, {
      fields: [_pages_v_blocks_sustainability_cta_links._parentID],
      references: [_pages_v_blocks_sustainability.id],
      relationName: 'cta_links',
    }),
  }),
)
export const relations__pages_v_blocks_sustainability = relations(
  _pages_v_blocks_sustainability,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_sustainability._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_sustainability',
    }),
    image: one(media, {
      fields: [_pages_v_blocks_sustainability.image],
      references: [media.id],
      relationName: 'image',
    }),
    features: many(_pages_v_blocks_sustainability_features, {
      relationName: 'features',
    }),
    cta_links: many(_pages_v_blocks_sustainability_cta_links, {
      relationName: 'cta_links',
    }),
  }),
)
export const relations__pages_v_blocks_content_image = relations(
  _pages_v_blocks_content_image,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_content_image._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_contentImage',
    }),
    image: one(media, {
      fields: [_pages_v_blocks_content_image.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__pages_v_blocks_industry_showcase = relations(
  _pages_v_blocks_industry_showcase,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_industry_showcase._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_industryShowcase',
    }),
  }),
)
export const relations__pages_v_blocks_showcase_content_items = relations(
  _pages_v_blocks_showcase_content_items,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_showcase, {
      fields: [_pages_v_blocks_showcase_content_items._parentID],
      references: [_pages_v_blocks_showcase.id],
      relationName: 'contentItems',
    }),
  }),
)
export const relations__pages_v_blocks_showcase_features = relations(
  _pages_v_blocks_showcase_features,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_showcase, {
      fields: [_pages_v_blocks_showcase_features._parentID],
      references: [_pages_v_blocks_showcase.id],
      relationName: 'features',
    }),
    media: one(media, {
      fields: [_pages_v_blocks_showcase_features.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations__pages_v_blocks_showcase_cta_links = relations(
  _pages_v_blocks_showcase_cta_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_showcase, {
      fields: [_pages_v_blocks_showcase_cta_links._parentID],
      references: [_pages_v_blocks_showcase.id],
      relationName: 'cta_links',
    }),
  }),
)
export const relations__pages_v_blocks_showcase = relations(
  _pages_v_blocks_showcase,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_showcase._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_showcase',
    }),
    contentItems: many(_pages_v_blocks_showcase_content_items, {
      relationName: 'contentItems',
    }),
    features: many(_pages_v_blocks_showcase_features, {
      relationName: 'features',
    }),
    cta_links: many(_pages_v_blocks_showcase_cta_links, {
      relationName: 'cta_links',
    }),
  }),
)
export const relations__pages_v_blocks_news = relations(_pages_v_blocks_news, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_news._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_news',
  }),
}))
export const relations__pages_v_blocks_product_filter_enabled_filters = relations(
  _pages_v_blocks_product_filter_enabled_filters,
  ({ one }) => ({
    parent: one(_pages_v_blocks_product_filter, {
      fields: [_pages_v_blocks_product_filter_enabled_filters.parent],
      references: [_pages_v_blocks_product_filter.id],
      relationName: 'enabledFilters',
    }),
  }),
)
export const relations__pages_v_blocks_product_filter_cta_links = relations(
  _pages_v_blocks_product_filter_cta_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_product_filter, {
      fields: [_pages_v_blocks_product_filter_cta_links._parentID],
      references: [_pages_v_blocks_product_filter.id],
      relationName: 'cta_links',
    }),
  }),
)
export const relations__pages_v_blocks_product_filter = relations(
  _pages_v_blocks_product_filter,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_product_filter._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_productFilter',
    }),
    enabledFilters: many(_pages_v_blocks_product_filter_enabled_filters, {
      relationName: 'enabledFilters',
    }),
    cta_links: many(_pages_v_blocks_product_filter_cta_links, {
      relationName: 'cta_links',
    }),
  }),
)
export const relations__pages_v_blocks_vertical_cards_cards = relations(
  _pages_v_blocks_vertical_cards_cards,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_vertical_cards, {
      fields: [_pages_v_blocks_vertical_cards_cards._parentID],
      references: [_pages_v_blocks_vertical_cards.id],
      relationName: 'cards',
    }),
    image: one(media, {
      fields: [_pages_v_blocks_vertical_cards_cards.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__pages_v_blocks_vertical_cards = relations(
  _pages_v_blocks_vertical_cards,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_vertical_cards._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_verticalCards',
    }),
    cards: many(_pages_v_blocks_vertical_cards_cards, {
      relationName: 'cards',
    }),
  }),
)
export const relations__pages_v_blocks_grid_image_cards_cards_highlights = relations(
  _pages_v_blocks_grid_image_cards_cards_highlights,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_grid_image_cards_cards, {
      fields: [_pages_v_blocks_grid_image_cards_cards_highlights._parentID],
      references: [_pages_v_blocks_grid_image_cards_cards.id],
      relationName: 'highlights',
    }),
  }),
)
export const relations__pages_v_blocks_grid_image_cards_cards = relations(
  _pages_v_blocks_grid_image_cards_cards,
  ({ one, many }) => ({
    _parentID: one(_pages_v_blocks_grid_image_cards, {
      fields: [_pages_v_blocks_grid_image_cards_cards._parentID],
      references: [_pages_v_blocks_grid_image_cards.id],
      relationName: 'cards',
    }),
    image: one(media, {
      fields: [_pages_v_blocks_grid_image_cards_cards.image],
      references: [media.id],
      relationName: 'image',
    }),
    highlights: many(_pages_v_blocks_grid_image_cards_cards_highlights, {
      relationName: 'highlights',
    }),
  }),
)
export const relations__pages_v_blocks_grid_image_cards = relations(
  _pages_v_blocks_grid_image_cards,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_grid_image_cards._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_gridImageCards',
    }),
    cards: many(_pages_v_blocks_grid_image_cards_cards, {
      relationName: 'cards',
    }),
  }),
)
export const relations__pages_v_blocks_careers = relations(_pages_v_blocks_careers, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_careers._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_careers',
  }),
}))
export const relations__pages_v_blocks_certifications_certifications = relations(
  _pages_v_blocks_certifications_certifications,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_certifications, {
      fields: [_pages_v_blocks_certifications_certifications._parentID],
      references: [_pages_v_blocks_certifications.id],
      relationName: 'certifications',
    }),
    image: one(media, {
      fields: [_pages_v_blocks_certifications_certifications.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__pages_v_blocks_certifications = relations(
  _pages_v_blocks_certifications,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_certifications._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_certifications',
    }),
    featuredCertification_image: one(media, {
      fields: [_pages_v_blocks_certifications.featuredCertification_image],
      references: [media.id],
      relationName: 'featuredCertification_image',
    }),
    certifications: many(_pages_v_blocks_certifications_certifications, {
      relationName: 'certifications',
    }),
  }),
)
export const relations__pages_v_blocks_timeline_items_key_achievements = relations(
  _pages_v_blocks_timeline_items_key_achievements,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_timeline_items, {
      fields: [_pages_v_blocks_timeline_items_key_achievements._parentID],
      references: [_pages_v_blocks_timeline_items.id],
      relationName: 'keyAchievements',
    }),
  }),
)
export const relations__pages_v_blocks_timeline_items = relations(
  _pages_v_blocks_timeline_items,
  ({ one, many }) => ({
    _parentID: one(_pages_v_blocks_timeline, {
      fields: [_pages_v_blocks_timeline_items._parentID],
      references: [_pages_v_blocks_timeline.id],
      relationName: 'items',
    }),
    keyAchievements: many(_pages_v_blocks_timeline_items_key_achievements, {
      relationName: 'keyAchievements',
    }),
    imageUrl: one(media, {
      fields: [_pages_v_blocks_timeline_items.imageUrl],
      references: [media.id],
      relationName: 'imageUrl',
    }),
  }),
)
export const relations__pages_v_blocks_timeline = relations(
  _pages_v_blocks_timeline,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_timeline._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_timeline',
    }),
    items: many(_pages_v_blocks_timeline_items, {
      relationName: 'items',
    }),
  }),
)
export const relations__pages_v_blocks_team = relations(_pages_v_blocks_team, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_team._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_team',
  }),
}))
export const relations__pages_v_locales = relations(_pages_v_locales, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_locales._parentID],
    references: [_pages_v.id],
    relationName: '_locales',
  }),
  version_hero_media: one(media, {
    fields: [_pages_v_locales.version_hero_media],
    references: [media.id],
    relationName: 'version_hero_media',
  }),
  version_meta_image: one(media, {
    fields: [_pages_v_locales.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
}))
export const relations__pages_v_rels = relations(_pages_v_rels, ({ one }) => ({
  parent: one(_pages_v, {
    fields: [_pages_v_rels.parent],
    references: [_pages_v.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [_pages_v_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [_pages_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  productsID: one(products, {
    fields: [_pages_v_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  industriesID: one(industries, {
    fields: [_pages_v_rels.industriesID],
    references: [industries.id],
    relationName: 'industries',
  }),
  productCategoriesID: one(product_categories, {
    fields: [_pages_v_rels.productCategoriesID],
    references: [product_categories.id],
    relationName: 'productCategories',
  }),
  careersID: one(careers, {
    fields: [_pages_v_rels.careersID],
    references: [careers.id],
    relationName: 'careers',
  }),
  teamMembersID: one(team_members, {
    fields: [_pages_v_rels.teamMembersID],
    references: [team_members.id],
    relationName: 'teamMembers',
  }),
}))
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: 'parent',
  }),
  version_hero_cta_links: many(_pages_v_version_hero_cta_links, {
    relationName: 'version_hero_cta_links',
  }),
  version_hero_slides: many(_sl_v, {
    relationName: 'version_hero_slides',
  }),
  _blocks_cta: many(_pages_v_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(_pages_v_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(_pages_v_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_formBlock: many(_pages_v_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  _blocks_quickAccess: many(_pages_v_blocks_quick_access, {
    relationName: '_blocks_quickAccess',
  }),
  _blocks_productShowcase: many(_pages_v_blocks_product_showcase, {
    relationName: '_blocks_productShowcase',
  }),
  _blocks_career: many(_pages_v_blocks_career, {
    relationName: '_blocks_career',
  }),
  _blocks_sustainability: many(_pages_v_blocks_sustainability, {
    relationName: '_blocks_sustainability',
  }),
  _blocks_contentImage: many(_pages_v_blocks_content_image, {
    relationName: '_blocks_contentImage',
  }),
  _blocks_industryShowcase: many(_pages_v_blocks_industry_showcase, {
    relationName: '_blocks_industryShowcase',
  }),
  _blocks_showcase: many(_pages_v_blocks_showcase, {
    relationName: '_blocks_showcase',
  }),
  _blocks_news: many(_pages_v_blocks_news, {
    relationName: '_blocks_news',
  }),
  _blocks_productFilter: many(_pages_v_blocks_product_filter, {
    relationName: '_blocks_productFilter',
  }),
  _blocks_verticalCards: many(_pages_v_blocks_vertical_cards, {
    relationName: '_blocks_verticalCards',
  }),
  _blocks_gridImageCards: many(_pages_v_blocks_grid_image_cards, {
    relationName: '_blocks_gridImageCards',
  }),
  _blocks_careers: many(_pages_v_blocks_careers, {
    relationName: '_blocks_careers',
  }),
  _blocks_certifications: many(_pages_v_blocks_certifications, {
    relationName: '_blocks_certifications',
  }),
  _blocks_timeline: many(_pages_v_blocks_timeline, {
    relationName: '_blocks_timeline',
  }),
  _blocks_team: many(_pages_v_blocks_team, {
    relationName: '_blocks_team',
  }),
  _locales: many(_pages_v_locales, {
    relationName: '_locales',
  }),
  _rels: many(_pages_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_posts_tags = relations(posts_tags, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_tags._parentID],
    references: [posts.id],
    relationName: 'tags',
  }),
}))
export const relations_posts_locales = relations(posts_locales, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_locales._parentID],
    references: [posts.id],
    relationName: '_locales',
  }),
  featuredImage: one(media, {
    fields: [posts_locales.featuredImage],
    references: [media.id],
    relationName: 'featuredImage',
  }),
  meta_image: one(media, {
    fields: [posts_locales.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
}))
export const relations_posts_rels = relations(posts_rels, ({ one }) => ({
  parent: one(posts, {
    fields: [posts_rels.parent],
    references: [posts.id],
    relationName: '_rels',
  }),
  productsID: one(products, {
    fields: [posts_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  servicesID: one(services, {
    fields: [posts_rels.servicesID],
    references: [services.id],
    relationName: 'services',
  }),
  industriesID: one(industries, {
    fields: [posts_rels.industriesID],
    references: [industries.id],
    relationName: 'industries',
  }),
  postsID: one(posts, {
    fields: [posts_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_posts = relations(posts, ({ one, many }) => ({
  tags: many(posts_tags, {
    relationName: 'tags',
  }),
  author: one(users, {
    fields: [posts.author],
    references: [users.id],
    relationName: 'author',
  }),
  _locales: many(posts_locales, {
    relationName: '_locales',
  }),
  _rels: many(posts_rels, {
    relationName: '_rels',
  }),
}))
export const relations__posts_v_version_tags = relations(_posts_v_version_tags, ({ one }) => ({
  _parentID: one(_posts_v, {
    fields: [_posts_v_version_tags._parentID],
    references: [_posts_v.id],
    relationName: 'version_tags',
  }),
}))
export const relations__posts_v_locales = relations(_posts_v_locales, ({ one }) => ({
  _parentID: one(_posts_v, {
    fields: [_posts_v_locales._parentID],
    references: [_posts_v.id],
    relationName: '_locales',
  }),
  version_featuredImage: one(media, {
    fields: [_posts_v_locales.version_featuredImage],
    references: [media.id],
    relationName: 'version_featuredImage',
  }),
  version_meta_image: one(media, {
    fields: [_posts_v_locales.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
}))
export const relations__posts_v_rels = relations(_posts_v_rels, ({ one }) => ({
  parent: one(_posts_v, {
    fields: [_posts_v_rels.parent],
    references: [_posts_v.id],
    relationName: '_rels',
  }),
  productsID: one(products, {
    fields: [_posts_v_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  servicesID: one(services, {
    fields: [_posts_v_rels.servicesID],
    references: [services.id],
    relationName: 'services',
  }),
  industriesID: one(industries, {
    fields: [_posts_v_rels.industriesID],
    references: [industries.id],
    relationName: 'industries',
  }),
  postsID: one(posts, {
    fields: [_posts_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations__posts_v = relations(_posts_v, ({ one, many }) => ({
  parent: one(posts, {
    fields: [_posts_v.parent],
    references: [posts.id],
    relationName: 'parent',
  }),
  version_tags: many(_posts_v_version_tags, {
    relationName: 'version_tags',
  }),
  version_author: one(users, {
    fields: [_posts_v.version_author],
    references: [users.id],
    relationName: 'version_author',
  }),
  _locales: many(_posts_v_locales, {
    relationName: '_locales',
  }),
  _rels: many(_posts_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_media = relations(media, () => ({}))
export const relations_product_categories_applications = relations(
  product_categories_applications,
  ({ one }) => ({
    _parentID: one(product_categories, {
      fields: [product_categories_applications._parentID],
      references: [product_categories.id],
      relationName: 'applications',
    }),
    imageSrc: one(media, {
      fields: [product_categories_applications.imageSrc],
      references: [media.id],
      relationName: 'imageSrc',
    }),
  }),
)
export const relations_product_categories_breadcrumbs = relations(
  product_categories_breadcrumbs,
  ({ one }) => ({
    _parentID: one(product_categories, {
      fields: [product_categories_breadcrumbs._parentID],
      references: [product_categories.id],
      relationName: 'breadcrumbs',
    }),
    doc: one(product_categories, {
      fields: [product_categories_breadcrumbs.doc],
      references: [product_categories.id],
      relationName: 'doc',
    }),
  }),
)
export const relations_product_categories_locales = relations(
  product_categories_locales,
  ({ one }) => ({
    _parentID: one(product_categories, {
      fields: [product_categories_locales._parentID],
      references: [product_categories.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_product_categories_rels = relations(product_categories_rels, ({ one }) => ({
  parent: one(product_categories, {
    fields: [product_categories_rels.parent],
    references: [product_categories.id],
    relationName: '_rels',
  }),
  productsID: one(products, {
    fields: [product_categories_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
}))
export const relations_product_categories = relations(product_categories, ({ one, many }) => ({
  image: one(media, {
    fields: [product_categories.image],
    references: [media.id],
    relationName: 'image',
  }),
  applications: many(product_categories_applications, {
    relationName: 'applications',
  }),
  parent: one(product_categories, {
    fields: [product_categories.parent],
    references: [product_categories.id],
    relationName: 'parent',
  }),
  breadcrumbs: many(product_categories_breadcrumbs, {
    relationName: 'breadcrumbs',
  }),
  _locales: many(product_categories_locales, {
    relationName: '_locales',
  }),
  _rels: many(product_categories_rels, {
    relationName: '_rels',
  }),
}))
export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: 'sessions',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: 'sessions',
  }),
}))
export const relations_products_technical_specifications_synonyms = relations(
  products_technical_specifications_synonyms,
  ({ one }) => ({
    _parentID: one(products, {
      fields: [products_technical_specifications_synonyms._parentID],
      references: [products.id],
      relationName: 'technicalSpecifications_synonyms',
    }),
  }),
)
export const relations_products_applications = relations(products_applications, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_applications._parentID],
    references: [products.id],
    relationName: 'applications',
  }),
  image: one(media, {
    fields: [products_applications.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_products_key_features = relations(products_key_features, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_key_features._parentID],
    references: [products.id],
    relationName: 'keyFeatures',
  }),
}))
export const relations_products_faq = relations(products_faq, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_faq._parentID],
    references: [products.id],
    relationName: 'faq',
  }),
}))
export const relations_products_locales = relations(products_locales, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_locales._parentID],
    references: [products.id],
    relationName: '_locales',
  }),
}))
export const relations_products_rels = relations(products_rels, ({ one }) => ({
  parent: one(products, {
    fields: [products_rels.parent],
    references: [products.id],
    relationName: '_rels',
  }),
  productCategoriesID: one(product_categories, {
    fields: [products_rels.productCategoriesID],
    references: [product_categories.id],
    relationName: 'productCategories',
  }),
  caseStudiesID: one(case_studies, {
    fields: [products_rels.caseStudiesID],
    references: [case_studies.id],
    relationName: 'caseStudies',
  }),
  productsID: one(products, {
    fields: [products_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
}))
export const relations_products = relations(products, ({ one, many }) => ({
  chemicalStructureImage: one(media, {
    fields: [products.chemicalStructureImage],
    references: [media.id],
    relationName: 'chemicalStructureImage',
  }),
  technicalSpecifications_synonyms: many(products_technical_specifications_synonyms, {
    relationName: 'technicalSpecifications_synonyms',
  }),
  applications: many(products_applications, {
    relationName: 'applications',
  }),
  keyFeatures: many(products_key_features, {
    relationName: 'keyFeatures',
  }),
  faq: many(products_faq, {
    relationName: 'faq',
  }),
  technicalDataSheets: one(product_documents, {
    fields: [products.technicalDataSheets],
    references: [product_documents.id],
    relationName: 'technicalDataSheets',
  }),
  safetyDataSheets: one(product_documents, {
    fields: [products.safetyDataSheets],
    references: [product_documents.id],
    relationName: 'safetyDataSheets',
  }),
  _locales: many(products_locales, {
    relationName: '_locales',
  }),
  _rels: many(products_rels, {
    relationName: '_rels',
  }),
}))
export const relations__products_v_version_technical_specifications_synonyms = relations(
  _products_v_version_technical_specifications_synonyms,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_technical_specifications_synonyms._parentID],
      references: [_products_v.id],
      relationName: 'version_technicalSpecifications_synonyms',
    }),
  }),
)
export const relations__products_v_version_applications = relations(
  _products_v_version_applications,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_applications._parentID],
      references: [_products_v.id],
      relationName: 'version_applications',
    }),
    image: one(media, {
      fields: [_products_v_version_applications.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__products_v_version_key_features = relations(
  _products_v_version_key_features,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_key_features._parentID],
      references: [_products_v.id],
      relationName: 'version_keyFeatures',
    }),
  }),
)
export const relations__products_v_version_faq = relations(_products_v_version_faq, ({ one }) => ({
  _parentID: one(_products_v, {
    fields: [_products_v_version_faq._parentID],
    references: [_products_v.id],
    relationName: 'version_faq',
  }),
}))
export const relations__products_v_locales = relations(_products_v_locales, ({ one }) => ({
  _parentID: one(_products_v, {
    fields: [_products_v_locales._parentID],
    references: [_products_v.id],
    relationName: '_locales',
  }),
}))
export const relations__products_v_rels = relations(_products_v_rels, ({ one }) => ({
  parent: one(_products_v, {
    fields: [_products_v_rels.parent],
    references: [_products_v.id],
    relationName: '_rels',
  }),
  productCategoriesID: one(product_categories, {
    fields: [_products_v_rels.productCategoriesID],
    references: [product_categories.id],
    relationName: 'productCategories',
  }),
  caseStudiesID: one(case_studies, {
    fields: [_products_v_rels.caseStudiesID],
    references: [case_studies.id],
    relationName: 'caseStudies',
  }),
  productsID: one(products, {
    fields: [_products_v_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
}))
export const relations__products_v = relations(_products_v, ({ one, many }) => ({
  parent: one(products, {
    fields: [_products_v.parent],
    references: [products.id],
    relationName: 'parent',
  }),
  version_chemicalStructureImage: one(media, {
    fields: [_products_v.version_chemicalStructureImage],
    references: [media.id],
    relationName: 'version_chemicalStructureImage',
  }),
  version_technicalSpecifications_synonyms: many(
    _products_v_version_technical_specifications_synonyms,
    {
      relationName: 'version_technicalSpecifications_synonyms',
    },
  ),
  version_applications: many(_products_v_version_applications, {
    relationName: 'version_applications',
  }),
  version_keyFeatures: many(_products_v_version_key_features, {
    relationName: 'version_keyFeatures',
  }),
  version_faq: many(_products_v_version_faq, {
    relationName: 'version_faq',
  }),
  version_technicalDataSheets: one(product_documents, {
    fields: [_products_v.version_technicalDataSheets],
    references: [product_documents.id],
    relationName: 'version_technicalDataSheets',
  }),
  version_safetyDataSheets: one(product_documents, {
    fields: [_products_v.version_safetyDataSheets],
    references: [product_documents.id],
    relationName: 'version_safetyDataSheets',
  }),
  _locales: many(_products_v_locales, {
    relationName: '_locales',
  }),
  _rels: many(_products_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_industries_challenges = relations(industries_challenges, ({ one }) => ({
  _parentID: one(industries, {
    fields: [industries_challenges._parentID],
    references: [industries.id],
    relationName: 'challenges',
  }),
  image: one(media, {
    fields: [industries_challenges.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_industries_locales = relations(industries_locales, ({ one }) => ({
  _parentID: one(industries, {
    fields: [industries_locales._parentID],
    references: [industries.id],
    relationName: '_locales',
  }),
}))
export const relations_industries_rels = relations(industries_rels, ({ one }) => ({
  parent: one(industries, {
    fields: [industries_rels.parent],
    references: [industries.id],
    relationName: '_rels',
  }),
  productsID: one(products, {
    fields: [industries_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  productCategoriesID: one(product_categories, {
    fields: [industries_rels.productCategoriesID],
    references: [product_categories.id],
    relationName: 'productCategories',
  }),
  servicesID: one(services, {
    fields: [industries_rels.servicesID],
    references: [services.id],
    relationName: 'services',
  }),
  caseStudiesID: one(case_studies, {
    fields: [industries_rels.caseStudiesID],
    references: [case_studies.id],
    relationName: 'caseStudies',
  }),
}))
export const relations_industries = relations(industries, ({ one, many }) => ({
  featuredImage: one(media, {
    fields: [industries.featuredImage],
    references: [media.id],
    relationName: 'featuredImage',
  }),
  challenges: many(industries_challenges, {
    relationName: 'challenges',
  }),
  _locales: many(industries_locales, {
    relationName: '_locales',
  }),
  _rels: many(industries_rels, {
    relationName: '_rels',
  }),
}))
export const relations__industries_v_version_challenges = relations(
  _industries_v_version_challenges,
  ({ one }) => ({
    _parentID: one(_industries_v, {
      fields: [_industries_v_version_challenges._parentID],
      references: [_industries_v.id],
      relationName: 'version_challenges',
    }),
    image: one(media, {
      fields: [_industries_v_version_challenges.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__industries_v_locales = relations(_industries_v_locales, ({ one }) => ({
  _parentID: one(_industries_v, {
    fields: [_industries_v_locales._parentID],
    references: [_industries_v.id],
    relationName: '_locales',
  }),
}))
export const relations__industries_v_rels = relations(_industries_v_rels, ({ one }) => ({
  parent: one(_industries_v, {
    fields: [_industries_v_rels.parent],
    references: [_industries_v.id],
    relationName: '_rels',
  }),
  productsID: one(products, {
    fields: [_industries_v_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  productCategoriesID: one(product_categories, {
    fields: [_industries_v_rels.productCategoriesID],
    references: [product_categories.id],
    relationName: 'productCategories',
  }),
  servicesID: one(services, {
    fields: [_industries_v_rels.servicesID],
    references: [services.id],
    relationName: 'services',
  }),
  caseStudiesID: one(case_studies, {
    fields: [_industries_v_rels.caseStudiesID],
    references: [case_studies.id],
    relationName: 'caseStudies',
  }),
}))
export const relations__industries_v = relations(_industries_v, ({ one, many }) => ({
  parent: one(industries, {
    fields: [_industries_v.parent],
    references: [industries.id],
    relationName: 'parent',
  }),
  version_featuredImage: one(media, {
    fields: [_industries_v.version_featuredImage],
    references: [media.id],
    relationName: 'version_featuredImage',
  }),
  version_challenges: many(_industries_v_version_challenges, {
    relationName: 'version_challenges',
  }),
  _locales: many(_industries_v_locales, {
    relationName: '_locales',
  }),
  _rels: many(_industries_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_case_studies_locales = relations(case_studies_locales, ({ one }) => ({
  _parentID: one(case_studies, {
    fields: [case_studies_locales._parentID],
    references: [case_studies.id],
    relationName: '_locales',
  }),
  meta_image: one(media, {
    fields: [case_studies_locales.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
}))
export const relations_case_studies_rels = relations(case_studies_rels, ({ one }) => ({
  parent: one(case_studies, {
    fields: [case_studies_rels.parent],
    references: [case_studies.id],
    relationName: '_rels',
  }),
  productsID: one(products, {
    fields: [case_studies_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  servicesID: one(services, {
    fields: [case_studies_rels.servicesID],
    references: [services.id],
    relationName: 'services',
  }),
}))
export const relations_case_studies = relations(case_studies, ({ one, many }) => ({
  featuredImage: one(media, {
    fields: [case_studies.featuredImage],
    references: [media.id],
    relationName: 'featuredImage',
  }),
  industry: one(industries, {
    fields: [case_studies.industry],
    references: [industries.id],
    relationName: 'industry',
  }),
  _locales: many(case_studies_locales, {
    relationName: '_locales',
  }),
  _rels: many(case_studies_rels, {
    relationName: '_rels',
  }),
}))
export const relations__case_studies_v_locales = relations(_case_studies_v_locales, ({ one }) => ({
  _parentID: one(_case_studies_v, {
    fields: [_case_studies_v_locales._parentID],
    references: [_case_studies_v.id],
    relationName: '_locales',
  }),
  version_meta_image: one(media, {
    fields: [_case_studies_v_locales.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
}))
export const relations__case_studies_v_rels = relations(_case_studies_v_rels, ({ one }) => ({
  parent: one(_case_studies_v, {
    fields: [_case_studies_v_rels.parent],
    references: [_case_studies_v.id],
    relationName: '_rels',
  }),
  productsID: one(products, {
    fields: [_case_studies_v_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  servicesID: one(services, {
    fields: [_case_studies_v_rels.servicesID],
    references: [services.id],
    relationName: 'services',
  }),
}))
export const relations__case_studies_v = relations(_case_studies_v, ({ one, many }) => ({
  parent: one(case_studies, {
    fields: [_case_studies_v.parent],
    references: [case_studies.id],
    relationName: 'parent',
  }),
  version_featuredImage: one(media, {
    fields: [_case_studies_v.version_featuredImage],
    references: [media.id],
    relationName: 'version_featuredImage',
  }),
  version_industry: one(industries, {
    fields: [_case_studies_v.version_industry],
    references: [industries.id],
    relationName: 'version_industry',
  }),
  _locales: many(_case_studies_v_locales, {
    relationName: '_locales',
  }),
  _rels: many(_case_studies_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_services_accreditations = relations(services_accreditations, ({ one }) => ({
  _parentID: one(services, {
    fields: [services_accreditations._parentID],
    references: [services.id],
    relationName: 'accreditations',
  }),
}))
export const relations_services_sub_services_display_items = relations(
  services_sub_services_display_items,
  ({ one }) => ({
    _parentID: one(services_sub_services, {
      fields: [services_sub_services_display_items._parentID],
      references: [services_sub_services.id],
      relationName: 'displayItems',
    }),
  }),
)
export const relations_services_sub_services_features = relations(
  services_sub_services_features,
  ({ one }) => ({
    _parentID: one(services_sub_services, {
      fields: [services_sub_services_features._parentID],
      references: [services_sub_services.id],
      relationName: 'features',
    }),
  }),
)
export const relations_services_sub_services = relations(
  services_sub_services,
  ({ one, many }) => ({
    _parentID: one(services, {
      fields: [services_sub_services._parentID],
      references: [services.id],
      relationName: 'subServices',
    }),
    image: one(media, {
      fields: [services_sub_services.image],
      references: [media.id],
      relationName: 'image',
    }),
    displayItems: many(services_sub_services_display_items, {
      relationName: 'displayItems',
    }),
    features: many(services_sub_services_features, {
      relationName: 'features',
    }),
  }),
)
export const relations_services_features = relations(services_features, ({ one }) => ({
  _parentID: one(services, {
    fields: [services_features._parentID],
    references: [services.id],
    relationName: 'features',
  }),
}))
export const relations_services_locales = relations(services_locales, ({ one }) => ({
  _parentID: one(services, {
    fields: [services_locales._parentID],
    references: [services.id],
    relationName: '_locales',
  }),
}))
export const relations_services_rels = relations(services_rels, ({ one }) => ({
  parent: one(services, {
    fields: [services_rels.parent],
    references: [services.id],
    relationName: '_rels',
  }),
  teamMembersID: one(team_members, {
    fields: [services_rels.teamMembersID],
    references: [team_members.id],
    relationName: 'teamMembers',
  }),
  caseStudiesID: one(case_studies, {
    fields: [services_rels.caseStudiesID],
    references: [case_studies.id],
    relationName: 'caseStudies',
  }),
  industriesID: one(industries, {
    fields: [services_rels.industriesID],
    references: [industries.id],
    relationName: 'industries',
  }),
}))
export const relations_services = relations(services, ({ one, many }) => ({
  accreditations: many(services_accreditations, {
    relationName: 'accreditations',
  }),
  featuredImage: one(media, {
    fields: [services.featuredImage],
    references: [media.id],
    relationName: 'featuredImage',
  }),
  subServices: many(services_sub_services, {
    relationName: 'subServices',
  }),
  features: many(services_features, {
    relationName: 'features',
  }),
  _locales: many(services_locales, {
    relationName: '_locales',
  }),
  _rels: many(services_rels, {
    relationName: '_rels',
  }),
}))
export const relations__services_v_version_accreditations = relations(
  _services_v_version_accreditations,
  ({ one }) => ({
    _parentID: one(_services_v, {
      fields: [_services_v_version_accreditations._parentID],
      references: [_services_v.id],
      relationName: 'version_accreditations',
    }),
  }),
)
export const relations__services_v_version_sub_services_display_items = relations(
  _services_v_version_sub_services_display_items,
  ({ one }) => ({
    _parentID: one(_services_v_version_sub_services, {
      fields: [_services_v_version_sub_services_display_items._parentID],
      references: [_services_v_version_sub_services.id],
      relationName: 'displayItems',
    }),
  }),
)
export const relations__services_v_version_sub_services_features = relations(
  _services_v_version_sub_services_features,
  ({ one }) => ({
    _parentID: one(_services_v_version_sub_services, {
      fields: [_services_v_version_sub_services_features._parentID],
      references: [_services_v_version_sub_services.id],
      relationName: 'features',
    }),
  }),
)
export const relations__services_v_version_sub_services = relations(
  _services_v_version_sub_services,
  ({ one, many }) => ({
    _parentID: one(_services_v, {
      fields: [_services_v_version_sub_services._parentID],
      references: [_services_v.id],
      relationName: 'version_subServices',
    }),
    image: one(media, {
      fields: [_services_v_version_sub_services.image],
      references: [media.id],
      relationName: 'image',
    }),
    displayItems: many(_services_v_version_sub_services_display_items, {
      relationName: 'displayItems',
    }),
    features: many(_services_v_version_sub_services_features, {
      relationName: 'features',
    }),
  }),
)
export const relations__services_v_version_features = relations(
  _services_v_version_features,
  ({ one }) => ({
    _parentID: one(_services_v, {
      fields: [_services_v_version_features._parentID],
      references: [_services_v.id],
      relationName: 'version_features',
    }),
  }),
)
export const relations__services_v_locales = relations(_services_v_locales, ({ one }) => ({
  _parentID: one(_services_v, {
    fields: [_services_v_locales._parentID],
    references: [_services_v.id],
    relationName: '_locales',
  }),
}))
export const relations__services_v_rels = relations(_services_v_rels, ({ one }) => ({
  parent: one(_services_v, {
    fields: [_services_v_rels.parent],
    references: [_services_v.id],
    relationName: '_rels',
  }),
  teamMembersID: one(team_members, {
    fields: [_services_v_rels.teamMembersID],
    references: [team_members.id],
    relationName: 'teamMembers',
  }),
  caseStudiesID: one(case_studies, {
    fields: [_services_v_rels.caseStudiesID],
    references: [case_studies.id],
    relationName: 'caseStudies',
  }),
  industriesID: one(industries, {
    fields: [_services_v_rels.industriesID],
    references: [industries.id],
    relationName: 'industries',
  }),
}))
export const relations__services_v = relations(_services_v, ({ one, many }) => ({
  parent: one(services, {
    fields: [_services_v.parent],
    references: [services.id],
    relationName: 'parent',
  }),
  version_accreditations: many(_services_v_version_accreditations, {
    relationName: 'version_accreditations',
  }),
  version_featuredImage: one(media, {
    fields: [_services_v.version_featuredImage],
    references: [media.id],
    relationName: 'version_featuredImage',
  }),
  version_subServices: many(_services_v_version_sub_services, {
    relationName: 'version_subServices',
  }),
  version_features: many(_services_v_version_features, {
    relationName: 'version_features',
  }),
  _locales: many(_services_v_locales, {
    relationName: '_locales',
  }),
  _rels: many(_services_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_team_members_locales = relations(team_members_locales, ({ one }) => ({
  _parentID: one(team_members, {
    fields: [team_members_locales._parentID],
    references: [team_members.id],
    relationName: '_locales',
  }),
}))
export const relations_team_members_rels = relations(team_members_rels, ({ one }) => ({
  parent: one(team_members, {
    fields: [team_members_rels.parent],
    references: [team_members.id],
    relationName: '_rels',
  }),
  servicesID: one(services, {
    fields: [team_members_rels.servicesID],
    references: [services.id],
    relationName: 'services',
  }),
}))
export const relations_team_members = relations(team_members, ({ one, many }) => ({
  image: one(media, {
    fields: [team_members.image],
    references: [media.id],
    relationName: 'image',
  }),
  _locales: many(team_members_locales, {
    relationName: '_locales',
  }),
  _rels: many(team_members_rels, {
    relationName: '_rels',
  }),
}))
export const relations_careers_key_responsibilities = relations(
  careers_key_responsibilities,
  ({ one }) => ({
    _parentID: one(careers, {
      fields: [careers_key_responsibilities._parentID],
      references: [careers.id],
      relationName: 'keyResponsibilities',
    }),
  }),
)
export const relations_careers_requirements = relations(careers_requirements, ({ one }) => ({
  _parentID: one(careers, {
    fields: [careers_requirements._parentID],
    references: [careers.id],
    relationName: 'requirements',
  }),
}))
export const relations_careers_preferred_qualifications = relations(
  careers_preferred_qualifications,
  ({ one }) => ({
    _parentID: one(careers, {
      fields: [careers_preferred_qualifications._parentID],
      references: [careers.id],
      relationName: 'preferredQualifications',
    }),
  }),
)
export const relations_careers_benefits = relations(careers_benefits, ({ one }) => ({
  _parentID: one(careers, {
    fields: [careers_benefits._parentID],
    references: [careers.id],
    relationName: 'benefits',
  }),
}))
export const relations_careers = relations(careers, ({ many }) => ({
  keyResponsibilities: many(careers_key_responsibilities, {
    relationName: 'keyResponsibilities',
  }),
  requirements: many(careers_requirements, {
    relationName: 'requirements',
  }),
  preferredQualifications: many(careers_preferred_qualifications, {
    relationName: 'preferredQualifications',
  }),
  benefits: many(careers_benefits, {
    relationName: 'benefits',
  }),
}))
export const relations__careers_v_version_key_responsibilities = relations(
  _careers_v_version_key_responsibilities,
  ({ one }) => ({
    _parentID: one(_careers_v, {
      fields: [_careers_v_version_key_responsibilities._parentID],
      references: [_careers_v.id],
      relationName: 'version_keyResponsibilities',
    }),
  }),
)
export const relations__careers_v_version_requirements = relations(
  _careers_v_version_requirements,
  ({ one }) => ({
    _parentID: one(_careers_v, {
      fields: [_careers_v_version_requirements._parentID],
      references: [_careers_v.id],
      relationName: 'version_requirements',
    }),
  }),
)
export const relations__careers_v_version_preferred_qualifications = relations(
  _careers_v_version_preferred_qualifications,
  ({ one }) => ({
    _parentID: one(_careers_v, {
      fields: [_careers_v_version_preferred_qualifications._parentID],
      references: [_careers_v.id],
      relationName: 'version_preferredQualifications',
    }),
  }),
)
export const relations__careers_v_version_benefits = relations(
  _careers_v_version_benefits,
  ({ one }) => ({
    _parentID: one(_careers_v, {
      fields: [_careers_v_version_benefits._parentID],
      references: [_careers_v.id],
      relationName: 'version_benefits',
    }),
  }),
)
export const relations__careers_v = relations(_careers_v, ({ one, many }) => ({
  parent: one(careers, {
    fields: [_careers_v.parent],
    references: [careers.id],
    relationName: 'parent',
  }),
  version_keyResponsibilities: many(_careers_v_version_key_responsibilities, {
    relationName: 'version_keyResponsibilities',
  }),
  version_requirements: many(_careers_v_version_requirements, {
    relationName: 'version_requirements',
  }),
  version_preferredQualifications: many(_careers_v_version_preferred_qualifications, {
    relationName: 'version_preferredQualifications',
  }),
  version_benefits: many(_careers_v_version_benefits, {
    relationName: 'version_benefits',
  }),
}))
export const relations_product_documents = relations(product_documents, ({ one }) => ({
  product: one(products, {
    fields: [product_documents.product],
    references: [products.id],
    relationName: 'product',
  }),
}))
export const relations_redirects_rels = relations(redirects_rels, ({ one }) => ({
  parent: one(redirects, {
    fields: [redirects_rels.parent],
    references: [redirects.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [redirects_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [redirects_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_redirects = relations(redirects, ({ many }) => ({
  _rels: many(redirects_rels, {
    relationName: '_rels',
  }),
}))
export const relations_forms_blocks_checkbox_locales = relations(
  forms_blocks_checkbox_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_checkbox, {
      fields: [forms_blocks_checkbox_locales._parentID],
      references: [forms_blocks_checkbox.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_checkbox = relations(
  forms_blocks_checkbox,
  ({ one, many }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_checkbox._parentID],
      references: [forms.id],
      relationName: '_blocks_checkbox',
    }),
    _locales: many(forms_blocks_checkbox_locales, {
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_country_locales = relations(
  forms_blocks_country_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_country, {
      fields: [forms_blocks_country_locales._parentID],
      references: [forms_blocks_country.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_country = relations(forms_blocks_country, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_country._parentID],
    references: [forms.id],
    relationName: '_blocks_country',
  }),
  _locales: many(forms_blocks_country_locales, {
    relationName: '_locales',
  }),
}))
export const relations_forms_blocks_email_locales = relations(
  forms_blocks_email_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_email, {
      fields: [forms_blocks_email_locales._parentID],
      references: [forms_blocks_email.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_email = relations(forms_blocks_email, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_email._parentID],
    references: [forms.id],
    relationName: '_blocks_email',
  }),
  _locales: many(forms_blocks_email_locales, {
    relationName: '_locales',
  }),
}))
export const relations_forms_blocks_message_locales = relations(
  forms_blocks_message_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_message, {
      fields: [forms_blocks_message_locales._parentID],
      references: [forms_blocks_message.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_message = relations(forms_blocks_message, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_message._parentID],
    references: [forms.id],
    relationName: '_blocks_message',
  }),
  _locales: many(forms_blocks_message_locales, {
    relationName: '_locales',
  }),
}))
export const relations_forms_blocks_number_locales = relations(
  forms_blocks_number_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_number, {
      fields: [forms_blocks_number_locales._parentID],
      references: [forms_blocks_number.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_number = relations(forms_blocks_number, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_number._parentID],
    references: [forms.id],
    relationName: '_blocks_number',
  }),
  _locales: many(forms_blocks_number_locales, {
    relationName: '_locales',
  }),
}))
export const relations_forms_blocks_select_options_locales = relations(
  forms_blocks_select_options_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_select_options, {
      fields: [forms_blocks_select_options_locales._parentID],
      references: [forms_blocks_select_options.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_select_options = relations(
  forms_blocks_select_options,
  ({ one, many }) => ({
    _parentID: one(forms_blocks_select, {
      fields: [forms_blocks_select_options._parentID],
      references: [forms_blocks_select.id],
      relationName: 'options',
    }),
    _locales: many(forms_blocks_select_options_locales, {
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_select_locales = relations(
  forms_blocks_select_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_select, {
      fields: [forms_blocks_select_locales._parentID],
      references: [forms_blocks_select.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_select = relations(forms_blocks_select, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_select._parentID],
    references: [forms.id],
    relationName: '_blocks_select',
  }),
  _locales: many(forms_blocks_select_locales, {
    relationName: '_locales',
  }),
  options: many(forms_blocks_select_options, {
    relationName: 'options',
  }),
}))
export const relations_forms_blocks_state_locales = relations(
  forms_blocks_state_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_state, {
      fields: [forms_blocks_state_locales._parentID],
      references: [forms_blocks_state.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_state = relations(forms_blocks_state, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_state._parentID],
    references: [forms.id],
    relationName: '_blocks_state',
  }),
  _locales: many(forms_blocks_state_locales, {
    relationName: '_locales',
  }),
}))
export const relations_forms_blocks_text_locales = relations(
  forms_blocks_text_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_text, {
      fields: [forms_blocks_text_locales._parentID],
      references: [forms_blocks_text.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_text = relations(forms_blocks_text, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_text._parentID],
    references: [forms.id],
    relationName: '_blocks_text',
  }),
  _locales: many(forms_blocks_text_locales, {
    relationName: '_locales',
  }),
}))
export const relations_forms_blocks_textarea_locales = relations(
  forms_blocks_textarea_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_textarea, {
      fields: [forms_blocks_textarea_locales._parentID],
      references: [forms_blocks_textarea.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_textarea = relations(
  forms_blocks_textarea,
  ({ one, many }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_textarea._parentID],
      references: [forms.id],
      relationName: '_blocks_textarea',
    }),
    _locales: many(forms_blocks_textarea_locales, {
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_emails_locales = relations(forms_emails_locales, ({ one }) => ({
  _parentID: one(forms_emails, {
    fields: [forms_emails_locales._parentID],
    references: [forms_emails.id],
    relationName: '_locales',
  }),
}))
export const relations_forms_emails = relations(forms_emails, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_emails._parentID],
    references: [forms.id],
    relationName: 'emails',
  }),
  _locales: many(forms_emails_locales, {
    relationName: '_locales',
  }),
}))
export const relations_forms_locales = relations(forms_locales, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_locales._parentID],
    references: [forms.id],
    relationName: '_locales',
  }),
}))
export const relations_forms = relations(forms, ({ many }) => ({
  _blocks_checkbox: many(forms_blocks_checkbox, {
    relationName: '_blocks_checkbox',
  }),
  _blocks_country: many(forms_blocks_country, {
    relationName: '_blocks_country',
  }),
  _blocks_email: many(forms_blocks_email, {
    relationName: '_blocks_email',
  }),
  _blocks_message: many(forms_blocks_message, {
    relationName: '_blocks_message',
  }),
  _blocks_number: many(forms_blocks_number, {
    relationName: '_blocks_number',
  }),
  _blocks_select: many(forms_blocks_select, {
    relationName: '_blocks_select',
  }),
  _blocks_state: many(forms_blocks_state, {
    relationName: '_blocks_state',
  }),
  _blocks_text: many(forms_blocks_text, {
    relationName: '_blocks_text',
  }),
  _blocks_textarea: many(forms_blocks_textarea, {
    relationName: '_blocks_textarea',
  }),
  emails: many(forms_emails, {
    relationName: 'emails',
  }),
  _locales: many(forms_locales, {
    relationName: '_locales',
  }),
}))
export const relations_form_submissions_submission_data = relations(
  form_submissions_submission_data,
  ({ one }) => ({
    _parentID: one(form_submissions, {
      fields: [form_submissions_submission_data._parentID],
      references: [form_submissions.id],
      relationName: 'submissionData',
    }),
  }),
)
export const relations_form_submissions = relations(form_submissions, ({ one, many }) => ({
  form: one(forms, {
    fields: [form_submissions.form],
    references: [forms.id],
    relationName: 'form',
  }),
  submissionData: many(form_submissions_submission_data, {
    relationName: 'submissionData',
  }),
}))
export const relations_search_categories = relations(search_categories, ({ one }) => ({
  _parentID: one(search, {
    fields: [search_categories._parentID],
    references: [search.id],
    relationName: 'categories',
  }),
}))
export const relations_search_locales = relations(search_locales, ({ one }) => ({
  _parentID: one(search, {
    fields: [search_locales._parentID],
    references: [search.id],
    relationName: '_locales',
  }),
  meta_image: one(media, {
    fields: [search_locales.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
}))
export const relations_search_rels = relations(search_rels, ({ one }) => ({
  parent: one(search, {
    fields: [search_rels.parent],
    references: [search.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [search_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  productsID: one(products, {
    fields: [search_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  productCategoriesID: one(product_categories, {
    fields: [search_rels.productCategoriesID],
    references: [product_categories.id],
    relationName: 'productCategories',
  }),
  industriesID: one(industries, {
    fields: [search_rels.industriesID],
    references: [industries.id],
    relationName: 'industries',
  }),
  servicesID: one(services, {
    fields: [search_rels.servicesID],
    references: [services.id],
    relationName: 'services',
  }),
  careersID: one(careers, {
    fields: [search_rels.careersID],
    references: [careers.id],
    relationName: 'careers',
  }),
}))
export const relations_search = relations(search, ({ many }) => ({
  categories: many(search_categories, {
    relationName: 'categories',
  }),
  _locales: many(search_locales, {
    relationName: '_locales',
  }),
  _rels: many(search_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_jobs_log = relations(payload_jobs_log, ({ one }) => ({
  _parentID: one(payload_jobs, {
    fields: [payload_jobs_log._parentID],
    references: [payload_jobs.id],
    relationName: 'log',
  }),
}))
export const relations_payload_jobs = relations(payload_jobs, ({ many }) => ({
  log: many(payload_jobs_log, {
    relationName: 'log',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: 'posts',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    productCategoriesID: one(product_categories, {
      fields: [payload_locked_documents_rels.productCategoriesID],
      references: [product_categories.id],
      relationName: 'productCategories',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    productsID: one(products, {
      fields: [payload_locked_documents_rels.productsID],
      references: [products.id],
      relationName: 'products',
    }),
    industriesID: one(industries, {
      fields: [payload_locked_documents_rels.industriesID],
      references: [industries.id],
      relationName: 'industries',
    }),
    caseStudiesID: one(case_studies, {
      fields: [payload_locked_documents_rels.caseStudiesID],
      references: [case_studies.id],
      relationName: 'caseStudies',
    }),
    servicesID: one(services, {
      fields: [payload_locked_documents_rels.servicesID],
      references: [services.id],
      relationName: 'services',
    }),
    teamMembersID: one(team_members, {
      fields: [payload_locked_documents_rels.teamMembersID],
      references: [team_members.id],
      relationName: 'teamMembers',
    }),
    careersID: one(careers, {
      fields: [payload_locked_documents_rels.careersID],
      references: [careers.id],
      relationName: 'careers',
    }),
    'product-documentsID': one(product_documents, {
      fields: [payload_locked_documents_rels['product-documentsID']],
      references: [product_documents.id],
      relationName: 'product-documents',
    }),
    redirectsID: one(redirects, {
      fields: [payload_locked_documents_rels.redirectsID],
      references: [redirects.id],
      relationName: 'redirects',
    }),
    formsID: one(forms, {
      fields: [payload_locked_documents_rels.formsID],
      references: [forms.id],
      relationName: 'forms',
    }),
    'form-submissionsID': one(form_submissions, {
      fields: [payload_locked_documents_rels['form-submissionsID']],
      references: [form_submissions.id],
      relationName: 'form-submissions',
    }),
    searchID: one(search, {
      fields: [payload_locked_documents_rels.searchID],
      references: [search.id],
      relationName: 'search',
    }),
    'payload-jobsID': one(payload_jobs, {
      fields: [payload_locked_documents_rels['payload-jobsID']],
      references: [payload_jobs.id],
      relationName: 'payload-jobs',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_header_nav_items = relations(header_nav_items, ({ one }) => ({
  _parentID: one(header, {
    fields: [header_nav_items._parentID],
    references: [header.id],
    relationName: 'navItems',
  }),
}))
export const relations_header_rels = relations(header_rels, ({ one }) => ({
  parent: one(header, {
    fields: [header_rels.parent],
    references: [header.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [header_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [header_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_header = relations(header, ({ many }) => ({
  navItems: many(header_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(header_rels, {
    relationName: '_rels',
  }),
}))
export const relations_footer_nav_items = relations(footer_nav_items, ({ one }) => ({
  _parentID: one(footer, {
    fields: [footer_nav_items._parentID],
    references: [footer.id],
    relationName: 'navItems',
  }),
}))
export const relations_footer_rels = relations(footer_rels, ({ one }) => ({
  parent: one(footer, {
    fields: [footer_rels.parent],
    references: [footer.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [footer_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [footer_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_footer = relations(footer, ({ many }) => ({
  navItems: many(footer_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(footer_rels, {
    relationName: '_rels',
  }),
}))

type DatabaseSchema = {
  enum__locales: typeof enum__locales
  enum_pages_hero_cta_links_link_type: typeof enum_pages_hero_cta_links_link_type
  enum_pages_hero_cta_links_link_appearance: typeof enum_pages_hero_cta_links_link_appearance
  enum_sl_featured_item_links_link_type: typeof enum_sl_featured_item_links_link_type
  enum_sl_featured_item_links_link_appearance: typeof enum_sl_featured_item_links_link_appearance
  enum_sl_featured_cards_links_link_type: typeof enum_sl_featured_cards_links_link_type
  enum_sl_featured_cards_links_link_appearance: typeof enum_sl_featured_cards_links_link_appearance
  enum_sl_cta_links_link_type: typeof enum_sl_cta_links_link_type
  enum_sl_cta_links_link_appearance: typeof enum_sl_cta_links_link_appearance
  enum_pages_blocks_cta_links_link_type: typeof enum_pages_blocks_cta_links_link_type
  enum_pages_blocks_cta_links_link_appearance: typeof enum_pages_blocks_cta_links_link_appearance
  enum_pages_blocks_content_columns_size: typeof enum_pages_blocks_content_columns_size
  enum_pages_blocks_content_columns_link_type: typeof enum_pages_blocks_content_columns_link_type
  enum_pages_blocks_content_columns_link_appearance: typeof enum_pages_blocks_content_columns_link_appearance
  enum_pages_blocks_quick_access_cards_links_link_type: typeof enum_pages_blocks_quick_access_cards_links_link_type
  enum_pages_blocks_quick_access_cards_links_link_appearance: typeof enum_pages_blocks_quick_access_cards_links_link_appearance
  enum_pages_blocks_product_showcase_cta_links_link_type: typeof enum_pages_blocks_product_showcase_cta_links_link_type
  enum_pages_blocks_product_showcase_cta_links_link_appearance: typeof enum_pages_blocks_product_showcase_cta_links_link_appearance
  enum_pages_blocks_career_cta_links_link_type: typeof enum_pages_blocks_career_cta_links_link_type
  enum_pages_blocks_career_cta_links_link_appearance: typeof enum_pages_blocks_career_cta_links_link_appearance
  enum_pages_blocks_sustainability_cta_links_link_type: typeof enum_pages_blocks_sustainability_cta_links_link_type
  enum_pages_blocks_sustainability_cta_links_link_appearance: typeof enum_pages_blocks_sustainability_cta_links_link_appearance
  enum_pages_blocks_content_image_layout: typeof enum_pages_blocks_content_image_layout
  enum_pages_blocks_showcase_cta_links_link_type: typeof enum_pages_blocks_showcase_cta_links_link_type
  enum_pages_blocks_showcase_cta_links_link_appearance: typeof enum_pages_blocks_showcase_cta_links_link_appearance
  enum_pages_blocks_showcase_type: typeof enum_pages_blocks_showcase_type
  enum_pages_blocks_product_filter_enabled_filters: typeof enum_pages_blocks_product_filter_enabled_filters
  enum_pages_blocks_product_filter_cta_links_link_type: typeof enum_pages_blocks_product_filter_cta_links_link_type
  enum_pages_blocks_product_filter_cta_links_link_appearance: typeof enum_pages_blocks_product_filter_cta_links_link_appearance
  enum_pages_status: typeof enum_pages_status
  enum_pages_hero_type: typeof enum_pages_hero_type
  enum__pages_v_version_hero_cta_links_link_type: typeof enum__pages_v_version_hero_cta_links_link_type
  enum__pages_v_version_hero_cta_links_link_appearance: typeof enum__pages_v_version_hero_cta_links_link_appearance
  enum__sl_v_featured_item_links_link_type: typeof enum__sl_v_featured_item_links_link_type
  enum__sl_v_featured_item_links_link_appearance: typeof enum__sl_v_featured_item_links_link_appearance
  enum__sl_v_featured_cards_links_link_type: typeof enum__sl_v_featured_cards_links_link_type
  enum__sl_v_featured_cards_links_link_appearance: typeof enum__sl_v_featured_cards_links_link_appearance
  enum__sl_v_cta_links_link_type: typeof enum__sl_v_cta_links_link_type
  enum__sl_v_cta_links_link_appearance: typeof enum__sl_v_cta_links_link_appearance
  enum__pages_v_blocks_cta_links_link_type: typeof enum__pages_v_blocks_cta_links_link_type
  enum__pages_v_blocks_cta_links_link_appearance: typeof enum__pages_v_blocks_cta_links_link_appearance
  enum__pages_v_blocks_content_columns_size: typeof enum__pages_v_blocks_content_columns_size
  enum__pages_v_blocks_content_columns_link_type: typeof enum__pages_v_blocks_content_columns_link_type
  enum__pages_v_blocks_content_columns_link_appearance: typeof enum__pages_v_blocks_content_columns_link_appearance
  enum__pages_v_blocks_quick_access_cards_links_link_type: typeof enum__pages_v_blocks_quick_access_cards_links_link_type
  enum__pages_v_blocks_quick_access_cards_links_link_appearance: typeof enum__pages_v_blocks_quick_access_cards_links_link_appearance
  enum__pages_v_blocks_product_showcase_cta_links_link_type: typeof enum__pages_v_blocks_product_showcase_cta_links_link_type
  enum__pages_v_blocks_product_showcase_cta_links_link_appearance: typeof enum__pages_v_blocks_product_showcase_cta_links_link_appearance
  enum__pages_v_blocks_career_cta_links_link_type: typeof enum__pages_v_blocks_career_cta_links_link_type
  enum__pages_v_blocks_career_cta_links_link_appearance: typeof enum__pages_v_blocks_career_cta_links_link_appearance
  enum__pages_v_blocks_sustainability_cta_links_link_type: typeof enum__pages_v_blocks_sustainability_cta_links_link_type
  enum__pages_v_blocks_sustainability_cta_links_link_appearance: typeof enum__pages_v_blocks_sustainability_cta_links_link_appearance
  enum__pages_v_blocks_content_image_layout: typeof enum__pages_v_blocks_content_image_layout
  enum__pages_v_blocks_showcase_cta_links_link_type: typeof enum__pages_v_blocks_showcase_cta_links_link_type
  enum__pages_v_blocks_showcase_cta_links_link_appearance: typeof enum__pages_v_blocks_showcase_cta_links_link_appearance
  enum__pages_v_blocks_showcase_type: typeof enum__pages_v_blocks_showcase_type
  enum__pages_v_blocks_product_filter_enabled_filters: typeof enum__pages_v_blocks_product_filter_enabled_filters
  enum__pages_v_blocks_product_filter_cta_links_link_type: typeof enum__pages_v_blocks_product_filter_cta_links_link_type
  enum__pages_v_blocks_product_filter_cta_links_link_appearance: typeof enum__pages_v_blocks_product_filter_cta_links_link_appearance
  enum__pages_v_version_status: typeof enum__pages_v_version_status
  enum__pages_v_published_locale: typeof enum__pages_v_published_locale
  enum__pages_v_version_hero_type: typeof enum__pages_v_version_hero_type
  enum_posts_type: typeof enum_posts_type
  enum_posts_status: typeof enum_posts_status
  enum__posts_v_version_type: typeof enum__posts_v_version_type
  enum__posts_v_version_status: typeof enum__posts_v_version_status
  enum__posts_v_published_locale: typeof enum__posts_v_published_locale
  enum_products_technical_specifications_lab_verified: typeof enum_products_technical_specifications_lab_verified
  enum_products_status: typeof enum_products_status
  enum__products_v_version_technical_specifications_lab_verified: typeof enum__products_v_version_technical_specifications_lab_verified
  enum__products_v_version_status: typeof enum__products_v_version_status
  enum__products_v_published_locale: typeof enum__products_v_published_locale
  enum_industries_status: typeof enum_industries_status
  enum__industries_v_version_status: typeof enum__industries_v_version_status
  enum__industries_v_published_locale: typeof enum__industries_v_published_locale
  enum_case_studies_status: typeof enum_case_studies_status
  enum__case_studies_v_version_status: typeof enum__case_studies_v_version_status
  enum__case_studies_v_published_locale: typeof enum__case_studies_v_published_locale
  enum_services_status: typeof enum_services_status
  enum__services_v_version_status: typeof enum__services_v_version_status
  enum__services_v_published_locale: typeof enum__services_v_published_locale
  enum_careers_type: typeof enum_careers_type
  enum_careers_status: typeof enum_careers_status
  enum__careers_v_version_type: typeof enum__careers_v_version_type
  enum__careers_v_version_status: typeof enum__careers_v_version_status
  enum__careers_v_published_locale: typeof enum__careers_v_published_locale
  enum_product_documents_type: typeof enum_product_documents_type
  enum_redirects_to_type: typeof enum_redirects_to_type
  enum_forms_confirmation_type: typeof enum_forms_confirmation_type
  enum_payload_jobs_log_task_slug: typeof enum_payload_jobs_log_task_slug
  enum_payload_jobs_log_state: typeof enum_payload_jobs_log_state
  enum_payload_jobs_task_slug: typeof enum_payload_jobs_task_slug
  enum_header_nav_items_link_type: typeof enum_header_nav_items_link_type
  enum_footer_nav_items_link_type: typeof enum_footer_nav_items_link_type
  pages_hero_cta_links: typeof pages_hero_cta_links
  sl_featured_item_links: typeof sl_featured_item_links
  sl_featured_cards_links: typeof sl_featured_cards_links
  sl_featured_cards: typeof sl_featured_cards
  sl_cta_links: typeof sl_cta_links
  sl: typeof sl
  pages_blocks_cta_links: typeof pages_blocks_cta_links
  pages_blocks_cta: typeof pages_blocks_cta
  pages_blocks_content_columns: typeof pages_blocks_content_columns
  pages_blocks_content: typeof pages_blocks_content
  pages_blocks_media_block: typeof pages_blocks_media_block
  pages_blocks_form_block: typeof pages_blocks_form_block
  pages_blocks_quick_access_cards_links: typeof pages_blocks_quick_access_cards_links
  pages_blocks_quick_access_cards: typeof pages_blocks_quick_access_cards
  pages_blocks_quick_access: typeof pages_blocks_quick_access
  pages_blocks_product_showcase_products: typeof pages_blocks_product_showcase_products
  pages_blocks_product_showcase_cta_links: typeof pages_blocks_product_showcase_cta_links
  pages_blocks_product_showcase: typeof pages_blocks_product_showcase
  pages_blocks_career_features: typeof pages_blocks_career_features
  pages_blocks_career_cta_links: typeof pages_blocks_career_cta_links
  pages_blocks_career: typeof pages_blocks_career
  pages_blocks_sustainability_features: typeof pages_blocks_sustainability_features
  pages_blocks_sustainability_cta_links: typeof pages_blocks_sustainability_cta_links
  pages_blocks_sustainability: typeof pages_blocks_sustainability
  pages_blocks_content_image: typeof pages_blocks_content_image
  pages_blocks_industry_showcase: typeof pages_blocks_industry_showcase
  pages_blocks_showcase_content_items: typeof pages_blocks_showcase_content_items
  pages_blocks_showcase_features: typeof pages_blocks_showcase_features
  pages_blocks_showcase_cta_links: typeof pages_blocks_showcase_cta_links
  pages_blocks_showcase: typeof pages_blocks_showcase
  pages_blocks_news: typeof pages_blocks_news
  pages_blocks_product_filter_enabled_filters: typeof pages_blocks_product_filter_enabled_filters
  pages_blocks_product_filter_cta_links: typeof pages_blocks_product_filter_cta_links
  pages_blocks_product_filter: typeof pages_blocks_product_filter
  pages_blocks_vertical_cards_cards: typeof pages_blocks_vertical_cards_cards
  pages_blocks_vertical_cards: typeof pages_blocks_vertical_cards
  pages_blocks_grid_image_cards_cards_highlights: typeof pages_blocks_grid_image_cards_cards_highlights
  pages_blocks_grid_image_cards_cards: typeof pages_blocks_grid_image_cards_cards
  pages_blocks_grid_image_cards: typeof pages_blocks_grid_image_cards
  pages_blocks_careers: typeof pages_blocks_careers
  pages_blocks_certifications_certifications: typeof pages_blocks_certifications_certifications
  pages_blocks_certifications: typeof pages_blocks_certifications
  pages_blocks_timeline_items_key_achievements: typeof pages_blocks_timeline_items_key_achievements
  pages_blocks_timeline_items: typeof pages_blocks_timeline_items
  pages_blocks_timeline: typeof pages_blocks_timeline
  pages_blocks_team: typeof pages_blocks_team
  pages: typeof pages
  pages_locales: typeof pages_locales
  pages_rels: typeof pages_rels
  _pages_v_version_hero_cta_links: typeof _pages_v_version_hero_cta_links
  _sl_v_featured_item_links: typeof _sl_v_featured_item_links
  _sl_v_featured_cards_links: typeof _sl_v_featured_cards_links
  _sl_v_featured_cards: typeof _sl_v_featured_cards
  _sl_v_cta_links: typeof _sl_v_cta_links
  _sl_v: typeof _sl_v
  _pages_v_blocks_cta_links: typeof _pages_v_blocks_cta_links
  _pages_v_blocks_cta: typeof _pages_v_blocks_cta
  _pages_v_blocks_content_columns: typeof _pages_v_blocks_content_columns
  _pages_v_blocks_content: typeof _pages_v_blocks_content
  _pages_v_blocks_media_block: typeof _pages_v_blocks_media_block
  _pages_v_blocks_form_block: typeof _pages_v_blocks_form_block
  _pages_v_blocks_quick_access_cards_links: typeof _pages_v_blocks_quick_access_cards_links
  _pages_v_blocks_quick_access_cards: typeof _pages_v_blocks_quick_access_cards
  _pages_v_blocks_quick_access: typeof _pages_v_blocks_quick_access
  _pages_v_blocks_product_showcase_products: typeof _pages_v_blocks_product_showcase_products
  _pages_v_blocks_product_showcase_cta_links: typeof _pages_v_blocks_product_showcase_cta_links
  _pages_v_blocks_product_showcase: typeof _pages_v_blocks_product_showcase
  _pages_v_blocks_career_features: typeof _pages_v_blocks_career_features
  _pages_v_blocks_career_cta_links: typeof _pages_v_blocks_career_cta_links
  _pages_v_blocks_career: typeof _pages_v_blocks_career
  _pages_v_blocks_sustainability_features: typeof _pages_v_blocks_sustainability_features
  _pages_v_blocks_sustainability_cta_links: typeof _pages_v_blocks_sustainability_cta_links
  _pages_v_blocks_sustainability: typeof _pages_v_blocks_sustainability
  _pages_v_blocks_content_image: typeof _pages_v_blocks_content_image
  _pages_v_blocks_industry_showcase: typeof _pages_v_blocks_industry_showcase
  _pages_v_blocks_showcase_content_items: typeof _pages_v_blocks_showcase_content_items
  _pages_v_blocks_showcase_features: typeof _pages_v_blocks_showcase_features
  _pages_v_blocks_showcase_cta_links: typeof _pages_v_blocks_showcase_cta_links
  _pages_v_blocks_showcase: typeof _pages_v_blocks_showcase
  _pages_v_blocks_news: typeof _pages_v_blocks_news
  _pages_v_blocks_product_filter_enabled_filters: typeof _pages_v_blocks_product_filter_enabled_filters
  _pages_v_blocks_product_filter_cta_links: typeof _pages_v_blocks_product_filter_cta_links
  _pages_v_blocks_product_filter: typeof _pages_v_blocks_product_filter
  _pages_v_blocks_vertical_cards_cards: typeof _pages_v_blocks_vertical_cards_cards
  _pages_v_blocks_vertical_cards: typeof _pages_v_blocks_vertical_cards
  _pages_v_blocks_grid_image_cards_cards_highlights: typeof _pages_v_blocks_grid_image_cards_cards_highlights
  _pages_v_blocks_grid_image_cards_cards: typeof _pages_v_blocks_grid_image_cards_cards
  _pages_v_blocks_grid_image_cards: typeof _pages_v_blocks_grid_image_cards
  _pages_v_blocks_careers: typeof _pages_v_blocks_careers
  _pages_v_blocks_certifications_certifications: typeof _pages_v_blocks_certifications_certifications
  _pages_v_blocks_certifications: typeof _pages_v_blocks_certifications
  _pages_v_blocks_timeline_items_key_achievements: typeof _pages_v_blocks_timeline_items_key_achievements
  _pages_v_blocks_timeline_items: typeof _pages_v_blocks_timeline_items
  _pages_v_blocks_timeline: typeof _pages_v_blocks_timeline
  _pages_v_blocks_team: typeof _pages_v_blocks_team
  _pages_v: typeof _pages_v
  _pages_v_locales: typeof _pages_v_locales
  _pages_v_rels: typeof _pages_v_rels
  posts_tags: typeof posts_tags
  posts: typeof posts
  posts_locales: typeof posts_locales
  posts_rels: typeof posts_rels
  _posts_v_version_tags: typeof _posts_v_version_tags
  _posts_v: typeof _posts_v
  _posts_v_locales: typeof _posts_v_locales
  _posts_v_rels: typeof _posts_v_rels
  media: typeof media
  product_categories_applications: typeof product_categories_applications
  product_categories_breadcrumbs: typeof product_categories_breadcrumbs
  product_categories: typeof product_categories
  product_categories_locales: typeof product_categories_locales
  product_categories_rels: typeof product_categories_rels
  users_sessions: typeof users_sessions
  users: typeof users
  products_technical_specifications_synonyms: typeof products_technical_specifications_synonyms
  products_applications: typeof products_applications
  products_key_features: typeof products_key_features
  products_faq: typeof products_faq
  products: typeof products
  products_locales: typeof products_locales
  products_rels: typeof products_rels
  _products_v_version_technical_specifications_synonyms: typeof _products_v_version_technical_specifications_synonyms
  _products_v_version_applications: typeof _products_v_version_applications
  _products_v_version_key_features: typeof _products_v_version_key_features
  _products_v_version_faq: typeof _products_v_version_faq
  _products_v: typeof _products_v
  _products_v_locales: typeof _products_v_locales
  _products_v_rels: typeof _products_v_rels
  industries_challenges: typeof industries_challenges
  industries: typeof industries
  industries_locales: typeof industries_locales
  industries_rels: typeof industries_rels
  _industries_v_version_challenges: typeof _industries_v_version_challenges
  _industries_v: typeof _industries_v
  _industries_v_locales: typeof _industries_v_locales
  _industries_v_rels: typeof _industries_v_rels
  case_studies: typeof case_studies
  case_studies_locales: typeof case_studies_locales
  case_studies_rels: typeof case_studies_rels
  _case_studies_v: typeof _case_studies_v
  _case_studies_v_locales: typeof _case_studies_v_locales
  _case_studies_v_rels: typeof _case_studies_v_rels
  services_accreditations: typeof services_accreditations
  services_sub_services_display_items: typeof services_sub_services_display_items
  services_sub_services_features: typeof services_sub_services_features
  services_sub_services: typeof services_sub_services
  services_features: typeof services_features
  services: typeof services
  services_locales: typeof services_locales
  services_rels: typeof services_rels
  _services_v_version_accreditations: typeof _services_v_version_accreditations
  _services_v_version_sub_services_display_items: typeof _services_v_version_sub_services_display_items
  _services_v_version_sub_services_features: typeof _services_v_version_sub_services_features
  _services_v_version_sub_services: typeof _services_v_version_sub_services
  _services_v_version_features: typeof _services_v_version_features
  _services_v: typeof _services_v
  _services_v_locales: typeof _services_v_locales
  _services_v_rels: typeof _services_v_rels
  team_members: typeof team_members
  team_members_locales: typeof team_members_locales
  team_members_rels: typeof team_members_rels
  careers_key_responsibilities: typeof careers_key_responsibilities
  careers_requirements: typeof careers_requirements
  careers_preferred_qualifications: typeof careers_preferred_qualifications
  careers_benefits: typeof careers_benefits
  careers: typeof careers
  _careers_v_version_key_responsibilities: typeof _careers_v_version_key_responsibilities
  _careers_v_version_requirements: typeof _careers_v_version_requirements
  _careers_v_version_preferred_qualifications: typeof _careers_v_version_preferred_qualifications
  _careers_v_version_benefits: typeof _careers_v_version_benefits
  _careers_v: typeof _careers_v
  product_documents: typeof product_documents
  redirects: typeof redirects
  redirects_rels: typeof redirects_rels
  forms_blocks_checkbox: typeof forms_blocks_checkbox
  forms_blocks_checkbox_locales: typeof forms_blocks_checkbox_locales
  forms_blocks_country: typeof forms_blocks_country
  forms_blocks_country_locales: typeof forms_blocks_country_locales
  forms_blocks_email: typeof forms_blocks_email
  forms_blocks_email_locales: typeof forms_blocks_email_locales
  forms_blocks_message: typeof forms_blocks_message
  forms_blocks_message_locales: typeof forms_blocks_message_locales
  forms_blocks_number: typeof forms_blocks_number
  forms_blocks_number_locales: typeof forms_blocks_number_locales
  forms_blocks_select_options: typeof forms_blocks_select_options
  forms_blocks_select_options_locales: typeof forms_blocks_select_options_locales
  forms_blocks_select: typeof forms_blocks_select
  forms_blocks_select_locales: typeof forms_blocks_select_locales
  forms_blocks_state: typeof forms_blocks_state
  forms_blocks_state_locales: typeof forms_blocks_state_locales
  forms_blocks_text: typeof forms_blocks_text
  forms_blocks_text_locales: typeof forms_blocks_text_locales
  forms_blocks_textarea: typeof forms_blocks_textarea
  forms_blocks_textarea_locales: typeof forms_blocks_textarea_locales
  forms_emails: typeof forms_emails
  forms_emails_locales: typeof forms_emails_locales
  forms: typeof forms
  forms_locales: typeof forms_locales
  form_submissions_submission_data: typeof form_submissions_submission_data
  form_submissions: typeof form_submissions
  search_categories: typeof search_categories
  search: typeof search
  search_locales: typeof search_locales
  search_rels: typeof search_rels
  payload_jobs_log: typeof payload_jobs_log
  payload_jobs: typeof payload_jobs
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  header_nav_items: typeof header_nav_items
  header: typeof header
  header_rels: typeof header_rels
  footer_nav_items: typeof footer_nav_items
  footer: typeof footer
  footer_rels: typeof footer_rels
  relations_pages_hero_cta_links: typeof relations_pages_hero_cta_links
  relations_sl_featured_item_links: typeof relations_sl_featured_item_links
  relations_sl_featured_cards_links: typeof relations_sl_featured_cards_links
  relations_sl_featured_cards: typeof relations_sl_featured_cards
  relations_sl_cta_links: typeof relations_sl_cta_links
  relations_sl: typeof relations_sl
  relations_pages_blocks_cta_links: typeof relations_pages_blocks_cta_links
  relations_pages_blocks_cta: typeof relations_pages_blocks_cta
  relations_pages_blocks_content_columns: typeof relations_pages_blocks_content_columns
  relations_pages_blocks_content: typeof relations_pages_blocks_content
  relations_pages_blocks_media_block: typeof relations_pages_blocks_media_block
  relations_pages_blocks_form_block: typeof relations_pages_blocks_form_block
  relations_pages_blocks_quick_access_cards_links: typeof relations_pages_blocks_quick_access_cards_links
  relations_pages_blocks_quick_access_cards: typeof relations_pages_blocks_quick_access_cards
  relations_pages_blocks_quick_access: typeof relations_pages_blocks_quick_access
  relations_pages_blocks_product_showcase_products: typeof relations_pages_blocks_product_showcase_products
  relations_pages_blocks_product_showcase_cta_links: typeof relations_pages_blocks_product_showcase_cta_links
  relations_pages_blocks_product_showcase: typeof relations_pages_blocks_product_showcase
  relations_pages_blocks_career_features: typeof relations_pages_blocks_career_features
  relations_pages_blocks_career_cta_links: typeof relations_pages_blocks_career_cta_links
  relations_pages_blocks_career: typeof relations_pages_blocks_career
  relations_pages_blocks_sustainability_features: typeof relations_pages_blocks_sustainability_features
  relations_pages_blocks_sustainability_cta_links: typeof relations_pages_blocks_sustainability_cta_links
  relations_pages_blocks_sustainability: typeof relations_pages_blocks_sustainability
  relations_pages_blocks_content_image: typeof relations_pages_blocks_content_image
  relations_pages_blocks_industry_showcase: typeof relations_pages_blocks_industry_showcase
  relations_pages_blocks_showcase_content_items: typeof relations_pages_blocks_showcase_content_items
  relations_pages_blocks_showcase_features: typeof relations_pages_blocks_showcase_features
  relations_pages_blocks_showcase_cta_links: typeof relations_pages_blocks_showcase_cta_links
  relations_pages_blocks_showcase: typeof relations_pages_blocks_showcase
  relations_pages_blocks_news: typeof relations_pages_blocks_news
  relations_pages_blocks_product_filter_enabled_filters: typeof relations_pages_blocks_product_filter_enabled_filters
  relations_pages_blocks_product_filter_cta_links: typeof relations_pages_blocks_product_filter_cta_links
  relations_pages_blocks_product_filter: typeof relations_pages_blocks_product_filter
  relations_pages_blocks_vertical_cards_cards: typeof relations_pages_blocks_vertical_cards_cards
  relations_pages_blocks_vertical_cards: typeof relations_pages_blocks_vertical_cards
  relations_pages_blocks_grid_image_cards_cards_highlights: typeof relations_pages_blocks_grid_image_cards_cards_highlights
  relations_pages_blocks_grid_image_cards_cards: typeof relations_pages_blocks_grid_image_cards_cards
  relations_pages_blocks_grid_image_cards: typeof relations_pages_blocks_grid_image_cards
  relations_pages_blocks_careers: typeof relations_pages_blocks_careers
  relations_pages_blocks_certifications_certifications: typeof relations_pages_blocks_certifications_certifications
  relations_pages_blocks_certifications: typeof relations_pages_blocks_certifications
  relations_pages_blocks_timeline_items_key_achievements: typeof relations_pages_blocks_timeline_items_key_achievements
  relations_pages_blocks_timeline_items: typeof relations_pages_blocks_timeline_items
  relations_pages_blocks_timeline: typeof relations_pages_blocks_timeline
  relations_pages_blocks_team: typeof relations_pages_blocks_team
  relations_pages_locales: typeof relations_pages_locales
  relations_pages_rels: typeof relations_pages_rels
  relations_pages: typeof relations_pages
  relations__pages_v_version_hero_cta_links: typeof relations__pages_v_version_hero_cta_links
  relations__sl_v_featured_item_links: typeof relations__sl_v_featured_item_links
  relations__sl_v_featured_cards_links: typeof relations__sl_v_featured_cards_links
  relations__sl_v_featured_cards: typeof relations__sl_v_featured_cards
  relations__sl_v_cta_links: typeof relations__sl_v_cta_links
  relations__sl_v: typeof relations__sl_v
  relations__pages_v_blocks_cta_links: typeof relations__pages_v_blocks_cta_links
  relations__pages_v_blocks_cta: typeof relations__pages_v_blocks_cta
  relations__pages_v_blocks_content_columns: typeof relations__pages_v_blocks_content_columns
  relations__pages_v_blocks_content: typeof relations__pages_v_blocks_content
  relations__pages_v_blocks_media_block: typeof relations__pages_v_blocks_media_block
  relations__pages_v_blocks_form_block: typeof relations__pages_v_blocks_form_block
  relations__pages_v_blocks_quick_access_cards_links: typeof relations__pages_v_blocks_quick_access_cards_links
  relations__pages_v_blocks_quick_access_cards: typeof relations__pages_v_blocks_quick_access_cards
  relations__pages_v_blocks_quick_access: typeof relations__pages_v_blocks_quick_access
  relations__pages_v_blocks_product_showcase_products: typeof relations__pages_v_blocks_product_showcase_products
  relations__pages_v_blocks_product_showcase_cta_links: typeof relations__pages_v_blocks_product_showcase_cta_links
  relations__pages_v_blocks_product_showcase: typeof relations__pages_v_blocks_product_showcase
  relations__pages_v_blocks_career_features: typeof relations__pages_v_blocks_career_features
  relations__pages_v_blocks_career_cta_links: typeof relations__pages_v_blocks_career_cta_links
  relations__pages_v_blocks_career: typeof relations__pages_v_blocks_career
  relations__pages_v_blocks_sustainability_features: typeof relations__pages_v_blocks_sustainability_features
  relations__pages_v_blocks_sustainability_cta_links: typeof relations__pages_v_blocks_sustainability_cta_links
  relations__pages_v_blocks_sustainability: typeof relations__pages_v_blocks_sustainability
  relations__pages_v_blocks_content_image: typeof relations__pages_v_blocks_content_image
  relations__pages_v_blocks_industry_showcase: typeof relations__pages_v_blocks_industry_showcase
  relations__pages_v_blocks_showcase_content_items: typeof relations__pages_v_blocks_showcase_content_items
  relations__pages_v_blocks_showcase_features: typeof relations__pages_v_blocks_showcase_features
  relations__pages_v_blocks_showcase_cta_links: typeof relations__pages_v_blocks_showcase_cta_links
  relations__pages_v_blocks_showcase: typeof relations__pages_v_blocks_showcase
  relations__pages_v_blocks_news: typeof relations__pages_v_blocks_news
  relations__pages_v_blocks_product_filter_enabled_filters: typeof relations__pages_v_blocks_product_filter_enabled_filters
  relations__pages_v_blocks_product_filter_cta_links: typeof relations__pages_v_blocks_product_filter_cta_links
  relations__pages_v_blocks_product_filter: typeof relations__pages_v_blocks_product_filter
  relations__pages_v_blocks_vertical_cards_cards: typeof relations__pages_v_blocks_vertical_cards_cards
  relations__pages_v_blocks_vertical_cards: typeof relations__pages_v_blocks_vertical_cards
  relations__pages_v_blocks_grid_image_cards_cards_highlights: typeof relations__pages_v_blocks_grid_image_cards_cards_highlights
  relations__pages_v_blocks_grid_image_cards_cards: typeof relations__pages_v_blocks_grid_image_cards_cards
  relations__pages_v_blocks_grid_image_cards: typeof relations__pages_v_blocks_grid_image_cards
  relations__pages_v_blocks_careers: typeof relations__pages_v_blocks_careers
  relations__pages_v_blocks_certifications_certifications: typeof relations__pages_v_blocks_certifications_certifications
  relations__pages_v_blocks_certifications: typeof relations__pages_v_blocks_certifications
  relations__pages_v_blocks_timeline_items_key_achievements: typeof relations__pages_v_blocks_timeline_items_key_achievements
  relations__pages_v_blocks_timeline_items: typeof relations__pages_v_blocks_timeline_items
  relations__pages_v_blocks_timeline: typeof relations__pages_v_blocks_timeline
  relations__pages_v_blocks_team: typeof relations__pages_v_blocks_team
  relations__pages_v_locales: typeof relations__pages_v_locales
  relations__pages_v_rels: typeof relations__pages_v_rels
  relations__pages_v: typeof relations__pages_v
  relations_posts_tags: typeof relations_posts_tags
  relations_posts_locales: typeof relations_posts_locales
  relations_posts_rels: typeof relations_posts_rels
  relations_posts: typeof relations_posts
  relations__posts_v_version_tags: typeof relations__posts_v_version_tags
  relations__posts_v_locales: typeof relations__posts_v_locales
  relations__posts_v_rels: typeof relations__posts_v_rels
  relations__posts_v: typeof relations__posts_v
  relations_media: typeof relations_media
  relations_product_categories_applications: typeof relations_product_categories_applications
  relations_product_categories_breadcrumbs: typeof relations_product_categories_breadcrumbs
  relations_product_categories_locales: typeof relations_product_categories_locales
  relations_product_categories_rels: typeof relations_product_categories_rels
  relations_product_categories: typeof relations_product_categories
  relations_users_sessions: typeof relations_users_sessions
  relations_users: typeof relations_users
  relations_products_technical_specifications_synonyms: typeof relations_products_technical_specifications_synonyms
  relations_products_applications: typeof relations_products_applications
  relations_products_key_features: typeof relations_products_key_features
  relations_products_faq: typeof relations_products_faq
  relations_products_locales: typeof relations_products_locales
  relations_products_rels: typeof relations_products_rels
  relations_products: typeof relations_products
  relations__products_v_version_technical_specifications_synonyms: typeof relations__products_v_version_technical_specifications_synonyms
  relations__products_v_version_applications: typeof relations__products_v_version_applications
  relations__products_v_version_key_features: typeof relations__products_v_version_key_features
  relations__products_v_version_faq: typeof relations__products_v_version_faq
  relations__products_v_locales: typeof relations__products_v_locales
  relations__products_v_rels: typeof relations__products_v_rels
  relations__products_v: typeof relations__products_v
  relations_industries_challenges: typeof relations_industries_challenges
  relations_industries_locales: typeof relations_industries_locales
  relations_industries_rels: typeof relations_industries_rels
  relations_industries: typeof relations_industries
  relations__industries_v_version_challenges: typeof relations__industries_v_version_challenges
  relations__industries_v_locales: typeof relations__industries_v_locales
  relations__industries_v_rels: typeof relations__industries_v_rels
  relations__industries_v: typeof relations__industries_v
  relations_case_studies_locales: typeof relations_case_studies_locales
  relations_case_studies_rels: typeof relations_case_studies_rels
  relations_case_studies: typeof relations_case_studies
  relations__case_studies_v_locales: typeof relations__case_studies_v_locales
  relations__case_studies_v_rels: typeof relations__case_studies_v_rels
  relations__case_studies_v: typeof relations__case_studies_v
  relations_services_accreditations: typeof relations_services_accreditations
  relations_services_sub_services_display_items: typeof relations_services_sub_services_display_items
  relations_services_sub_services_features: typeof relations_services_sub_services_features
  relations_services_sub_services: typeof relations_services_sub_services
  relations_services_features: typeof relations_services_features
  relations_services_locales: typeof relations_services_locales
  relations_services_rels: typeof relations_services_rels
  relations_services: typeof relations_services
  relations__services_v_version_accreditations: typeof relations__services_v_version_accreditations
  relations__services_v_version_sub_services_display_items: typeof relations__services_v_version_sub_services_display_items
  relations__services_v_version_sub_services_features: typeof relations__services_v_version_sub_services_features
  relations__services_v_version_sub_services: typeof relations__services_v_version_sub_services
  relations__services_v_version_features: typeof relations__services_v_version_features
  relations__services_v_locales: typeof relations__services_v_locales
  relations__services_v_rels: typeof relations__services_v_rels
  relations__services_v: typeof relations__services_v
  relations_team_members_locales: typeof relations_team_members_locales
  relations_team_members_rels: typeof relations_team_members_rels
  relations_team_members: typeof relations_team_members
  relations_careers_key_responsibilities: typeof relations_careers_key_responsibilities
  relations_careers_requirements: typeof relations_careers_requirements
  relations_careers_preferred_qualifications: typeof relations_careers_preferred_qualifications
  relations_careers_benefits: typeof relations_careers_benefits
  relations_careers: typeof relations_careers
  relations__careers_v_version_key_responsibilities: typeof relations__careers_v_version_key_responsibilities
  relations__careers_v_version_requirements: typeof relations__careers_v_version_requirements
  relations__careers_v_version_preferred_qualifications: typeof relations__careers_v_version_preferred_qualifications
  relations__careers_v_version_benefits: typeof relations__careers_v_version_benefits
  relations__careers_v: typeof relations__careers_v
  relations_product_documents: typeof relations_product_documents
  relations_redirects_rels: typeof relations_redirects_rels
  relations_redirects: typeof relations_redirects
  relations_forms_blocks_checkbox_locales: typeof relations_forms_blocks_checkbox_locales
  relations_forms_blocks_checkbox: typeof relations_forms_blocks_checkbox
  relations_forms_blocks_country_locales: typeof relations_forms_blocks_country_locales
  relations_forms_blocks_country: typeof relations_forms_blocks_country
  relations_forms_blocks_email_locales: typeof relations_forms_blocks_email_locales
  relations_forms_blocks_email: typeof relations_forms_blocks_email
  relations_forms_blocks_message_locales: typeof relations_forms_blocks_message_locales
  relations_forms_blocks_message: typeof relations_forms_blocks_message
  relations_forms_blocks_number_locales: typeof relations_forms_blocks_number_locales
  relations_forms_blocks_number: typeof relations_forms_blocks_number
  relations_forms_blocks_select_options_locales: typeof relations_forms_blocks_select_options_locales
  relations_forms_blocks_select_options: typeof relations_forms_blocks_select_options
  relations_forms_blocks_select_locales: typeof relations_forms_blocks_select_locales
  relations_forms_blocks_select: typeof relations_forms_blocks_select
  relations_forms_blocks_state_locales: typeof relations_forms_blocks_state_locales
  relations_forms_blocks_state: typeof relations_forms_blocks_state
  relations_forms_blocks_text_locales: typeof relations_forms_blocks_text_locales
  relations_forms_blocks_text: typeof relations_forms_blocks_text
  relations_forms_blocks_textarea_locales: typeof relations_forms_blocks_textarea_locales
  relations_forms_blocks_textarea: typeof relations_forms_blocks_textarea
  relations_forms_emails_locales: typeof relations_forms_emails_locales
  relations_forms_emails: typeof relations_forms_emails
  relations_forms_locales: typeof relations_forms_locales
  relations_forms: typeof relations_forms
  relations_form_submissions_submission_data: typeof relations_form_submissions_submission_data
  relations_form_submissions: typeof relations_form_submissions
  relations_search_categories: typeof relations_search_categories
  relations_search_locales: typeof relations_search_locales
  relations_search_rels: typeof relations_search_rels
  relations_search: typeof relations_search
  relations_payload_jobs_log: typeof relations_payload_jobs_log
  relations_payload_jobs: typeof relations_payload_jobs
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_header_nav_items: typeof relations_header_nav_items
  relations_header_rels: typeof relations_header_rels
  relations_header: typeof relations_header
  relations_footer_nav_items: typeof relations_footer_nav_items
  relations_footer_rels: typeof relations_footer_rels
  relations_footer: typeof relations_footer
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
